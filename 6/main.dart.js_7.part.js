// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.2.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var B = {
    Chip$(avatar, backgroundColor, deleteIcon, label, labelPadding, labelStyle, materialTapTargetSize, onDeleted, padding, shape) {
      return new B.Chip(avatar, label, labelStyle, labelPadding, shape, backgroundColor, padding, deleteIcon, onDeleted, materialTapTargetSize, null);
    },
    _RenderChip__boxRect(box) {
      var t1, t2, t3;
      if (box == null)
        t1 = C.Rect_0_0_0_0;
      else {
        t1 = box.parentData;
        t1.toString;
        t1 = type$.BoxParentData._as(t1).offset;
        t2 = box._box$_size;
        t2.toString;
        t3 = t1._dx;
        t1 = t1._dy;
        t2 = new A.Rect(t3, t1, t3 + t2._dx, t1 + t2._dy);
        t1 = t2;
      }
      return t1;
    },
    _hitIsOnDeleteIcon(chipSize, deleteButtonSize, padding, tapPosition, textDirection) {
      var adjustedPosition, t2, accessibleDeleteButtonWidth,
        t1 = chipSize._dx - padding.get$horizontal();
      padding.get$_top(padding);
      padding.get$_bottom(padding);
      adjustedPosition = tapPosition.$sub(0, new A.Offset(padding.left, padding.top));
      t2 = deleteButtonSize._dx;
      accessibleDeleteButtonWidth = Math.min(t1 * 0.499, Math.max(t2, 24 + t2 / 2));
      switch (textDirection.index) {
        case 1:
          return adjustedPosition._dx >= t1 - accessibleDeleteButtonWidth;
        case 0:
          return adjustedPosition._dx <= accessibleDeleteButtonWidth;
      }
    },
    Chip: function Chip(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.avatar = t0;
      _.label = t1;
      _.labelStyle = t2;
      _.labelPadding = t3;
      _.shape = t4;
      _.backgroundColor = t5;
      _.padding = t6;
      _.deleteIcon = t7;
      _.onDeleted = t8;
      _.materialTapTargetSize = t9;
      _.key = t10;
    },
    RawChip: function RawChip(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.avatar = t0;
      _.label = t1;
      _.labelStyle = t2;
      _.labelPadding = t3;
      _.deleteIcon = t4;
      _.onDeleted = t5;
      _.deleteIconColor = t6;
      _.deleteButtonTooltipMessage = t7;
      _.side = t8;
      _.shape = t9;
      _.clipBehavior = t10;
      _.focusNode = t11;
      _.autofocus = t12;
      _.backgroundColor = t13;
      _.padding = t14;
      _.visualDensity = t15;
      _.materialTapTargetSize = t16;
      _.elevation = t17;
      _.shadowColor = t18;
      _.surfaceTintColor = t19;
      _.useDeleteButtonTooltip = t20;
      _.tapEnabled = t21;
      _.key = t22;
    },
    _RawChipState: function _RawChipState(t0, t1, t2, t3) {
      var _ = this;
      _.___RawChipState_selectionFade_A = _.___RawChipState_enableAnimation_A = _.___RawChipState_deleteDrawerAnimation_A = _.___RawChipState_avatarDrawerAnimation_A = _.___RawChipState_checkmarkAnimation_A = _.___RawChipState_enableController_A = _.___RawChipState_deleteDrawerController_A = _.___RawChipState_avatarDrawerController_A = _.___RawChipState_selectController_A = $;
      _._isTapping = false;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _.MaterialStateMixin_materialStates = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _RawChipState__handleTapDown_closure: function _RawChipState__handleTapDown_closure(t0) {
      this.$this = t0;
    },
    _RawChipState__handleTapCancel_closure: function _RawChipState__handleTapCancel_closure(t0) {
      this.$this = t0;
    },
    _RawChipState__handleTap_closure: function _RawChipState__handleTap_closure(t0) {
      this.$this = t0;
    },
    _RawChipState_didUpdateWidget_closure: function _RawChipState_didUpdateWidget_closure(t0) {
      this.$this = t0;
    },
    _RawChipState_didUpdateWidget_closure0: function _RawChipState_didUpdateWidget_closure0(t0) {
      this.$this = t0;
    },
    _RawChipState_build_closure: function _RawChipState_build_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.resolvedShape = t1;
      _.theme = t2;
      _.chipTheme = t3;
      _.chipDefaults = t4;
    },
    _ChipRedirectingHitDetectionWidget: function _ChipRedirectingHitDetectionWidget(t0, t1, t2) {
      this.constraints = t0;
      this.child = t1;
      this.key = t2;
    },
    _RenderChipRedirectingHitDetection: function _RenderChipRedirectingHitDetection(t0, t1, t2) {
      var _ = this;
      _._additionalConstraints = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._box$_size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._owner = null;
    },
    _RenderChipRedirectingHitDetection_hitTest_closure: function _RenderChipRedirectingHitDetection_hitTest_closure(t0, t1) {
      this.$this = t0;
      this.offset = t1;
    },
    _ChipRenderWidget: function _ChipRenderWidget(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.theme = t0;
      _.value = t1;
      _.isEnabled = t2;
      _.checkmarkAnimation = t3;
      _.avatarDrawerAnimation = t4;
      _.deleteDrawerAnimation = t5;
      _.enableAnimation = t6;
      _.avatarBorder = t7;
      _.key = t8;
    },
    _ChipSlot: function _ChipSlot(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    _ChipRenderTheme: function _ChipRenderTheme(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.avatar = t0;
      _.label = t1;
      _.deleteIcon = t2;
      _.brightness = t3;
      _.padding = t4;
      _.visualDensity = t5;
      _.labelPadding = t6;
      _.showAvatar = t7;
      _.showCheckmark = t8;
      _.checkmarkColor = t9;
      _.canTapBody = t10;
    },
    _RenderChip: function _RenderChip(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.value = t0;
      _.isEnabled = t1;
      _.___RenderChip__pressRect_A = _.___RenderChip__deleteButtonRect_A = $;
      _.checkmarkAnimation = t2;
      _.avatarDrawerAnimation = t3;
      _.deleteDrawerAnimation = t4;
      _.enableAnimation = t5;
      _.avatarBorder = t6;
      _._chip$_theme = t7;
      _._chip$_textDirection = t8;
      _.SlottedContainerRenderObjectMixin__slotToChild = t9;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._box$_size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t10;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._owner = null;
    },
    _RenderChip_hitTest_closure: function _RenderChip_hitTest_closure(t0, t1) {
      this.center = t0;
      this.hitTestChild = t1;
    },
    _RenderChip_performLayout_centerLayout: function _RenderChip_performLayout_centerLayout(t0, t1) {
      this.$this = t0;
      this.sizes = t1;
    },
    _RenderChip__paintAvatar_paintWithOverlay: function _RenderChip__paintAvatar_paintWithOverlay(t0) {
      this.$this = t0;
    },
    _RenderChip__paintChild_closure: function _RenderChip__paintChild_closure(t0) {
      this.child = t0;
    },
    _ChipSizes: function _ChipSizes(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.size = t0;
      _.overall = t1;
      _.content = t2;
      _.avatar = t3;
      _.label = t4;
      _.deleteIcon = t5;
      _.densityAdjustment = t6;
    },
    _UnconstrainedInkSplashFactory: function _UnconstrainedInkSplashFactory(t0) {
      this.parentFactory = t0;
    },
    __ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin: function __ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin() {
    },
    __RawChipState_State_MaterialStateMixin: function __RawChipState_State_MaterialStateMixin() {
    },
    __RawChipState_State_MaterialStateMixin_TickerProviderStateMixin: function __RawChipState_State_MaterialStateMixin_TickerProviderStateMixin() {
    },
    __RenderChip_RenderBox_SlottedContainerRenderObjectMixin: function __RenderChip_RenderBox_SlottedContainerRenderObjectMixin() {
    },
    AnimatedSwitcher$(child, duration, switchInCurve) {
      return new B.AnimatedSwitcher(child, duration, switchInCurve, null);
    },
    AnimatedSwitcher_defaultTransitionBuilder(child, animation) {
      return new A.FadeTransition(animation, false, child, new A.ValueKey(child.key, type$.ValueKey_nullable_Key));
    },
    AnimatedSwitcher_defaultLayoutBuilder(currentChild, previousChildren) {
      var t1 = A.List_List$of(previousChildren, true, type$.Widget);
      if (currentChild != null)
        t1.push(currentChild);
      return new A.Stack(C.Alignment_0_0, null, C.StackFit_0, C.Clip_1, t1, null);
    },
    _ChildEntry: function _ChildEntry(t0, t1, t2, t3) {
      var _ = this;
      _.controller = t0;
      _.animation = t1;
      _.transition = t2;
      _.widgetChild = t3;
    },
    AnimatedSwitcher: function AnimatedSwitcher(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.duration = t1;
      _.switchInCurve = t2;
      _.key = t3;
    },
    _AnimatedSwitcherState: function _AnimatedSwitcherState(t0, t1, t2, t3, t4) {
      var _ = this;
      _._currentEntry = null;
      _._outgoingEntries = t0;
      _._outgoingWidgets = t1;
      _._childNumber = 0;
      _.TickerProviderStateMixin__tickers = t2;
      _.TickerProviderStateMixin__tickerModeNotifier = t3;
      _._widget = null;
      _._debugLifecycleState = t4;
      _._framework$_element = null;
    },
    _AnimatedSwitcherState__newEntry_closure: function _AnimatedSwitcherState__newEntry_closure(t0, t1, t2) {
      this.$this = t0;
      this.entry = t1;
      this.controller = t2;
    },
    _AnimatedSwitcherState__newEntry__closure: function _AnimatedSwitcherState__newEntry__closure(t0, t1) {
      this.$this = t0;
      this.entry = t1;
    },
    _AnimatedSwitcherState__rebuildOutgoingWidgetsIfNeeded_closure: function _AnimatedSwitcherState__rebuildOutgoingWidgetsIfNeeded_closure() {
    },
    _AnimatedSwitcherState_build_closure: function _AnimatedSwitcherState_build_closure(t0) {
      this.$this = t0;
    },
    __AnimatedSwitcherState_State_TickerProviderStateMixin: function __AnimatedSwitcherState_State_TickerProviderStateMixin() {
    },
    SizeChangedLayoutNotification: function SizeChangedLayoutNotification() {
    },
    SizeChangedLayoutNotifier: function SizeChangedLayoutNotifier(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    SizeChangedLayoutNotifier_createRenderObject_closure: function SizeChangedLayoutNotifier_createRenderObject_closure(t0) {
      this.context = t0;
    },
    _RenderSizeChangedWithCallback: function _RenderSizeChangedWithCallback(t0, t1, t2) {
      var _ = this;
      _.onLayoutChangedCallback = t0;
      _._oldSize = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._box$_size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._owner = null;
    },
    SuggestionsBoxController: function SuggestionsBoxController(t0) {
      this.context = t0;
      this.overlayEntry = null;
      this._isOpened = false;
    },
    TagEditor$(autoDisposeFocusNode, autofocus, backgroundColor, borderRadius, controller, cursorColor, debounceDuration, enableBorderColor, findSuggestions, focusNode, focusedBorderColor, hasAddButton, inputDecoration, key, keyboardType, $length, minTextFieldWidth, onDeleteTagAction, onFocusTagAction, onSelectOptionAction, onSubmitted, onTagChanged, padding, resetTextOnSubmitted, suggestionBuilder, suggestionMargin, suggestionPadding, suggestionsBoxBackgroundColor, suggestionsBoxElevation, suggestionsBoxMaxHeight, suggestionsBoxRadius, tagBuilder, tagSpacing, textInputAction, textStyle, useDefaultHighlight, $T) {
      return new B.TagEditor($length, minTextFieldWidth, tagSpacing, tagBuilder, false, onTagChanged, true, onSubmitted, focusNode, onDeleteTagAction, onFocusTagAction, controller, textStyle, inputDecoration, keyboardType, textInputAction, autofocus, cursorColor, backgroundColor, focusedBorderColor, enableBorderColor, borderRadius, padding, autoDisposeFocusNode, suggestionsBoxMaxHeight, suggestionsBoxElevation, suggestionBuilder, findSuggestions, onSelectOptionAction, suggestionsBoxBackgroundColor, suggestionsBoxRadius, debounceDuration, suggestionMargin, suggestionPadding, useDefaultHighlight, key, $T._eval$1("TagEditor<0>"));
    },
    TagEditor: function TagEditor(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36) {
      var _ = this;
      _.length = t0;
      _.minTextFieldWidth = t1;
      _.tagSpacing = t2;
      _.tagBuilder = t3;
      _.hasAddButton = t4;
      _.onTagChanged = t5;
      _.resetTextOnSubmitted = t6;
      _.onSubmitted = t7;
      _.focusNode = t8;
      _.onDeleteTagAction = t9;
      _.onFocusTagAction = t10;
      _.controller = t11;
      _.textStyle = t12;
      _.inputDecoration = t13;
      _.keyboardType = t14;
      _.textInputAction = t15;
      _.autofocus = t16;
      _.cursorColor = t17;
      _.backgroundColor = t18;
      _.focusedBorderColor = t19;
      _.enableBorderColor = t20;
      _.borderRadius = t21;
      _.padding = t22;
      _.autoDisposeFocusNode = t23;
      _.suggestionsBoxMaxHeight = t24;
      _.suggestionsBoxElevation = t25;
      _.suggestionBuilder = t26;
      _.findSuggestions = t27;
      _.onSelectOptionAction = t28;
      _.suggestionsBoxBackgroundColor = t29;
      _.suggestionsBoxRadius = t30;
      _.debounceDuration = t31;
      _.suggestionMargin = t32;
      _.suggestionPadding = t33;
      _.useDefaultHighlight = t34;
      _.key = t35;
      _.$ti = t36;
    },
    TagsEditorState: function TagsEditorState(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__TagsEditorState__textFieldController_A = $;
      _._previousText = "";
      _._tag_editor$_isFocused = false;
      _.__TagsEditorState__focusNodeKeyboard_A = _.__TagsEditorState__focusNode_A = $;
      _._suggestionsBoxController = _._suggestionsStreamController = null;
      _._tag_editor$_layerLink = t0;
      _._suggestions = null;
      _._countBackspacePressed = _._searchId = 0;
      _._deBouncer = null;
      _._highlightedOptionIndex = t1;
      _._validationSuggestionItemNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
      _.$ti = t4;
    },
    TagsEditorState__initializeSuggestionBox_closure: function TagsEditorState__initializeSuggestionBox_closure(t0) {
      this.$this = t0;
    },
    TagsEditorState__onFocusChanged_closure: function TagsEditorState__onFocusChanged_closure(t0) {
      this.$this = t0;
    },
    TagsEditorState__createOverlayEntry_closure: function TagsEditorState__createOverlayEntry_closure(t0) {
      this.$this = t0;
    },
    TagsEditorState__createOverlayEntry__closure: function TagsEditorState__createOverlayEntry__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.size = t2;
      _.compositedTransformFollowerOffset = t3;
      _.showTop = t4;
    },
    TagsEditorState__createOverlayEntry___closure: function TagsEditorState__createOverlayEntry___closure(t0, t1) {
      this.$this = t0;
      this.snapshot = t1;
    },
    TagsEditorState__onSearchChanged_closure: function TagsEditorState__onSearchChanged_closure(t0, t1) {
      this.$this = t0;
      this.results = t1;
    },
    TagsEditorState__scrollToVisible_closure: function TagsEditorState__scrollToVisible_closure(t0) {
      this.$this = t0;
    },
    TagsEditorState__scrollToVisible__closure: function TagsEditorState__scrollToVisible__closure(t0) {
      this.$this = t0;
    },
    TagsEditorState_build_closure: function TagsEditorState_build_closure(t0) {
      this.$this = t0;
    },
    TagsEditorState_build_closure0: function TagsEditorState_build_closure0(t0) {
      this.$this = t0;
    },
    TagsEditorState_build__closure: function TagsEditorState_build__closure(t0) {
      this.$this = t0;
    },
    TagEditorLayoutDelegate__isOverflow(childWidth, parentWidth, spacing, tagSizes) {
      return childWidth + C.JSArray_methods.fold$2(tagSizes, 0, new B.TagEditorLayoutDelegate__isOverflow_closure()) + spacing * Math.max(tagSizes.length - 1, 0) > parentWidth;
    },
    TagEditorLayoutDelegate: function TagEditorLayoutDelegate(t0, t1, t2, t3) {
      var _ = this;
      _.length = t0;
      _.minTextFieldWidth = t1;
      _.spacing = t2;
      _.parentSize = t3;
      _._debugChildrenNeedingLayout = _._idToChild = null;
    },
    TagEditorLayoutDelegate__isOverflow_closure: function TagEditorLayoutDelegate__isOverflow_closure() {
    },
    TagEditorLayoutDelegate_performLayout_closure: function TagEditorLayoutDelegate_performLayout_closure() {
    },
    TagLayout: function TagLayout(t0, t1, t2) {
      this.delegate = t0;
      this.children = t1;
      this.key = t2;
    },
    TagRenderLayoutBox: function TagRenderLayoutBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _._custom_layout$_delegate = t0;
      _.ContainerRenderObjectMixin__childCount = t1;
      _.ContainerRenderObjectMixin__firstChild = t2;
      _.ContainerRenderObjectMixin__lastChild = t3;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._box$_size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._owner = null;
    },
    ValidationSuggestionItem: function ValidationSuggestionItem(t0, t1, t2) {
      this.notifier = t0;
      this.child = t1;
      this.key = t2;
    }
  },
  D, C, A, J;
  B = hunkHelpers.updateHolder(holdersList[10], B);
  D = holdersList[15];
  C = holdersList[2];
  A = holdersList[0];
  J = holdersList[1];
  B.Chip.prototype = {
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this.deleteIcon;
      if (t1 == null)
        t1 = D.Icon_25o;
      return new B.RawChip(_this.avatar, _this.label, _this.labelStyle, _this.labelPadding, t1, _this.onDeleted, _null, _null, _null, _this.shape, C.Clip_0, _null, false, _this.backgroundColor, _this.padding, _null, _this.materialTapTargetSize, _null, _null, _null, true, false, _null);
    }
  };
  B.RawChip.prototype = {
    createState$0() {
      return new B._RawChipState(null, null, A.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState), C._StateLifecycle_0);
    }
  };
  B._RawChipState.prototype = {
    get$canTap() {
      this._widget.toString;
      return false;
    },
    initState$0() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      _this._widget.toString;
      _this.removeMaterialState$1(C.MaterialState_6);
      _this._widget.toString;
      _this.removeMaterialState$1(C.MaterialState_4);
      _this._widget.toString;
      t1 = A.AnimationController$(C.AnimationBehavior_0, _null, D.Duration_195000, 0, _null, 1, 0, _this);
      _this.___RawChipState_selectController_A = t1;
      _this.___RawChipState_selectionFade_A = A.CurvedAnimation$(C.Cubic_ifx, t1, _null);
      _this.___RawChipState_avatarDrawerController_A = A.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_150000, 0, _null, 1, _this._widget.avatar != null || false ? 1 : 0, _this);
      _this.___RawChipState_deleteDrawerController_A = A.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_150000, 0, _null, 1, _this._widget.onDeleted != null ? 1 : 0, _this);
      _this._widget.toString;
      _this.___RawChipState_enableController_A = A.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_75000, 0, _null, 1, 1, _this);
      _this.___RawChipState_checkmarkAnimation_A = A.CurvedAnimation$(new A.Interval(0.23076923076923073, 1, C.Cubic_ifx), _this.___RawChipState_selectController_A, new A.Interval(0.7435897435897436, 1, C.Cubic_ifx));
      _this.___RawChipState_deleteDrawerAnimation_A = A.CurvedAnimation$(C.Cubic_ifx, _this.___RawChipState_deleteDrawerController_A, _null);
      _this.___RawChipState_avatarDrawerAnimation_A = A.CurvedAnimation$(C.Cubic_ifx, _this.___RawChipState_avatarDrawerController_A, new A.Interval(0.4871794871794872, 1, C.Cubic_ifx));
      _this.___RawChipState_enableAnimation_A = A.CurvedAnimation$(C.Cubic_ifx, _this.___RawChipState_enableController_A, _null);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___RawChipState_selectController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___RawChipState_avatarDrawerController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___RawChipState_deleteDrawerController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.___RawChipState_enableController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin$dispose();
    },
    _chip$_handleTapDown$1(details) {
      var _this = this;
      if (!_this.get$canTap())
        return;
      _this.addMaterialState$1(C.MaterialState_2);
      _this.setState$1(new B._RawChipState__handleTapDown_closure(_this));
    },
    _chip$_handleTapCancel$0() {
      var _this = this;
      if (!_this.get$canTap())
        return;
      _this.removeMaterialState$1(C.MaterialState_2);
      _this.setState$1(new B._RawChipState__handleTapCancel_closure(_this));
    },
    _chip$_handleTap$0() {
      var _this = this;
      if (!_this.get$canTap())
        return;
      _this.removeMaterialState$1(C.MaterialState_2);
      _this.setState$1(new B._RawChipState__handleTap_closure(_this));
      _this._widget.toString;
    },
    _chip$_getBackgroundColor$3(theme, chipTheme, chipDefaults) {
      var t2, t3, _this = this,
        t1 = _this._widget;
      t1.toString;
      t2 = chipTheme.disabledColor;
      if (t2 == null)
        t2 = theme.disabledColor;
      t1 = t1.backgroundColor;
      t3 = _this.___RawChipState_enableController_A;
      t3 === $ && A.throwUnnamedLateFieldNI();
      t3 = new A.ColorTween(t2, t1).transform$1(0, t3.get$value(t3));
      _this._widget.toString;
      t1 = chipTheme.selectedColor;
      if (t1 == null)
        t1 = theme.chipTheme.selectedColor;
      if (t1 == null)
        t1 = chipDefaults.get$selectedColor();
      t2 = _this.___RawChipState_selectionFade_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      return new A.ColorTween(t3, t1).transform$1(0, t2.get$value(t2));
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      if (J.$eq$(oldWidget.avatar, t1.avatar)) {
        _this._widget.toString;
        t1 = false;
      } else
        t1 = true;
      if (t1)
        _this.setState$1(new B._RawChipState_didUpdateWidget_closure(_this));
      t1 = _this._widget;
      if (!J.$eq$(oldWidget.onDeleted, t1.onDeleted))
        _this.setState$1(new B._RawChipState_didUpdateWidget_closure0(_this));
    },
    _wrapWithTooltip$3$child$enabled$tooltip(child, enabled, tooltip) {
      if (!enabled || tooltip == null)
        return child;
      return A.Tooltip$(child, tooltip);
    },
    _buildDeleteIcon$4(context, theme, chipTheme, chipDefaults) {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this._widget;
      if (t1.onDeleted == null)
        return _null;
      t1 = t1.deleteButtonTooltipMessage;
      t2 = A.Localizations_of(context, C.Type_MaterialLocalizations_flR, type$.MaterialLocalizations);
      t2.toString;
      t1 = t2.get$deleteButtonTooltip();
      t2 = _this._widget;
      t3 = t2.onDeleted;
      t2 = t2.padding;
      t2 = t2 == null ? _null : t2.get$_top(t2) + t2.get$_bottom(t2);
      if (t2 == null)
        t2 = 0;
      t4 = A.Theme_of(context);
      t5 = _this._widget.onDeleted;
      t6 = chipTheme.deleteIconColor;
      if (t6 == null)
        t6 = theme.chipTheme.deleteIconColor;
      if (t6 == null)
        t6 = chipDefaults.get$deleteIconColor();
      t6 = theme.iconTheme.copyWith$1$color(t6);
      t1 = _this._wrapWithTooltip$3$child$enabled$tooltip(A.InkWell$(false, _null, true, A.IconTheme$(_this._widget.deleteIcon, t6, _null), _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, t5, _null, _null, _null, (32 + t2) * 0.45, _null, new B._UnconstrainedInkSplashFactory(t4.splashFactory), _null), t3 != null, t1);
      return new A.Semantics(A.SemanticsProperties$(_null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), true, false, false, t1, _null);
    },
    build$1(context) {
      var theme, chipTheme, brightness, t2, t3, primaryColor, t4, t5, t6, backgroundColor, deleteIconColor, disabledColor, selectedColor, secondarySelectedColor, secondaryLabelStyle, chipDefaults, textDirection, resolvedSide, resolvedShape, elevation, pressElevation, shadowColor, surfaceTintColor, checkmarkColor, showCheckmark, padding, labelStyle, labelPadding, iconTheme, effectiveLabelStyle, resolvedLabelStyle, avatar, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, result, densityAdjustment, constraints, _this = this, _null = null,
        t1 = A.EdgeInsets_lerp(C.EdgeInsets_8_0_8_0, C.EdgeInsets_4_0_4_0, A.clampDouble(context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.textScaleFactor - 1, 0, 1));
      t1.toString;
      theme = A.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.ChipTheme);
      chipTheme = A.Theme_of(context).chipTheme;
      brightness = chipTheme.brightness;
      if (brightness == null)
        brightness = theme.colorScheme.brightness;
      _this._widget.toString;
      t2 = brightness === C.Brightness_0 ? C.Color_4284809178 : theme.primaryColor;
      t3 = theme.textTheme.bodyLarge;
      t3.toString;
      primaryColor = brightness === C.Brightness_1 ? C.Color_4278190080 : C.Color_4294967295;
      t4 = primaryColor.value;
      t5 = t4 >>> 16 & 255;
      t6 = t4 >>> 8 & 255;
      t4 &= 255;
      backgroundColor = A.Color$fromARGB(31, t5, t6, t4);
      deleteIconColor = A.Color$fromARGB(222, t5, t6, t4);
      disabledColor = A.Color$fromARGB(12, t5, t6, t4);
      selectedColor = A.Color$fromARGB(61, t5, t6, t4);
      secondarySelectedColor = A.Color$fromARGB(61, t2.get$value(t2) >>> 16 & 255, t2.get$value(t2) >>> 8 & 255, t2.get$value(t2) & 255);
      secondaryLabelStyle = t3.copyWith$1$color(A.Color$fromARGB(222, t2.get$value(t2) >>> 16 & 255, t2.get$value(t2) >>> 8 & 255, t2.get$value(t2) & 255));
      t4 = A.ChipThemeData$(backgroundColor, brightness, _null, deleteIconColor, disabledColor, 0, _null, _null, t3.copyWith$1$color(A.Color$fromARGB(222, t5, t6, t4)), C.EdgeInsets_4_4_4_4, 8, secondaryLabelStyle, secondarySelectedColor, selectedColor, C.Color_4278190080, C.Color_4278190080, _null, true, _null, _null);
      chipDefaults = t4;
      textDirection = A.Directionality_maybeOf(context);
      t2 = _this.MaterialStateMixin_materialStates;
      t3 = type$.nullable_BorderSide;
      t4 = A.MaterialStateProperty_resolveAs(_this._widget.side, t2, t3);
      resolvedSide = t4 == null ? A.MaterialStateProperty_resolveAs(chipTheme.side, t2, t3) : t4;
      if (resolvedSide == null)
        resolvedSide = A.MaterialStateProperty_resolveAs(chipDefaults.side, t2, t3);
      t3 = type$.nullable_OutlinedBorder;
      t4 = A.MaterialStateProperty_resolveAs(_this._widget.shape, t2, t3);
      if (t4 == null)
        t4 = A.MaterialStateProperty_resolveAs(chipTheme.shape, t2, t3);
      resolvedShape = t4 == null ? A.MaterialStateProperty_resolveAs(chipDefaults.shape, t2, t3) : t4;
      resolvedShape = (resolvedShape == null ? C.StadiumBorder_Sik : resolvedShape).copyWith$1$side(resolvedSide);
      t3 = _this._widget;
      t3.toString;
      t4 = chipTheme.elevation;
      elevation = t4 == null ? chipDefaults.elevation : t4;
      if (elevation == null)
        elevation = 0;
      t4 = chipTheme.pressElevation;
      pressElevation = t4 == null ? chipDefaults.pressElevation : t4;
      if (pressElevation == null)
        pressElevation = 0;
      shadowColor = chipTheme.shadowColor;
      if (shadowColor == null)
        shadowColor = chipDefaults.shadowColor;
      surfaceTintColor = chipTheme.surfaceTintColor;
      if (surfaceTintColor == null)
        surfaceTintColor = chipDefaults.surfaceTintColor;
      checkmarkColor = chipTheme.checkmarkColor;
      if (checkmarkColor == null)
        checkmarkColor = chipDefaults.checkmarkColor;
      showCheckmark = true;
      t4 = t3.padding;
      padding = t4 == null ? chipTheme.padding : t4;
      if (padding == null) {
        t4 = chipDefaults.padding;
        t4.toString;
        padding = t4;
      }
      labelStyle = chipTheme.labelStyle;
      if (labelStyle == null) {
        t4 = chipDefaults.labelStyle;
        t4.toString;
        labelStyle = t4;
      }
      t4 = t3.labelPadding;
      labelPadding = t4;
      iconTheme = chipTheme.iconTheme;
      if (iconTheme == null)
        iconTheme = chipDefaults.iconTheme;
      effectiveLabelStyle = labelStyle.merge$1(t3.labelStyle);
      resolvedLabelStyle = effectiveLabelStyle.copyWith$1$color(A.MaterialStateProperty_resolveAs(effectiveLabelStyle.color, t2, type$.nullable_Color));
      t1 = iconTheme != null && _this._widget.avatar != null;
      t2 = _this._widget;
      if (t1) {
        t1 = t2.avatar;
        t1.toString;
        avatar = A.IconTheme$(t1, iconTheme, _null);
      } else
        avatar = t2.avatar;
      t1 = _this.get$canTap() && _this._isTapping ? pressElevation : elevation;
      t2 = _this._widget;
      t2 = t2.clipBehavior;
      t3 = _this.updateMaterialState$1(C.MaterialState_1);
      t4 = _this._widget.focusNode;
      t5 = _this.get$canTap() ? _this.get$_chip$_handleTap() : _null;
      t6 = _this.get$canTap() ? _this.get$_chip$_handleTapDown() : _null;
      t7 = _this.get$canTap() ? _this.get$_chip$_handleTapCancel() : _null;
      t8 = _this.get$canTap() ? _this.updateMaterialState$1(C.MaterialState_0) : _null;
      t9 = _this.___RawChipState_selectController_A;
      t9 === $ && A.throwUnnamedLateFieldNI();
      t10 = _this.___RawChipState_enableController_A;
      t10 === $ && A.throwUnnamedLateFieldNI();
      t10 = A._setArrayType([t9, t10], type$.JSArray_Listenable);
      t9 = _this._widget;
      t9 = A.DefaultTextStyle$(t9.label, _null, 1, C.TextOverflow_1, false, resolvedLabelStyle, C.TextAlign_4, _null, C.TextWidthBasis_0);
      t11 = B.AnimatedSwitcher$(avatar, C.Duration_150000, C.Cubic_ifx);
      t12 = B.AnimatedSwitcher$(_this._buildDeleteIcon$4(context, theme, chipTheme, chipDefaults), C.Duration_150000, C.Cubic_ifx);
      t13 = padding.resolve$1(textDirection);
      _this._widget.toString;
      t14 = theme.visualDensity;
      t15 = labelPadding.resolve$1(textDirection);
      t16 = _this._widget.avatar;
      t17 = _this.get$canTap();
      _this._widget.toString;
      t18 = _this.___RawChipState_checkmarkAnimation_A;
      t18 === $ && A.throwUnnamedLateFieldNI();
      t19 = _this.___RawChipState_enableAnimation_A;
      t19 === $ && A.throwUnnamedLateFieldNI();
      t20 = _this.___RawChipState_avatarDrawerAnimation_A;
      t20 === $ && A.throwUnnamedLateFieldNI();
      t21 = _this.___RawChipState_deleteDrawerAnimation_A;
      t21 === $ && A.throwUnnamedLateFieldNI();
      result = A.Material$(C.Duration_75000, true, _null, A.InkWell$(false, _null, true, A.AnimatedBuilder$(new A._MergingListenable(t10), new B._RawChipState_build_closure(_this, resolvedShape, theme, chipTheme, chipDefaults), _this._wrapWithTooltip$3$child$enabled$tooltip(new B._ChipRenderWidget(new B._ChipRenderTheme(t11, t9, t12, brightness, t13, t14, t15, t16 != null, showCheckmark, checkmarkColor, t17), false, true, t18, t20, t21, t19, C.CircleBorder_Umb, _null), false, _null)), resolvedShape, true, _null, t4, _null, _null, _null, _null, _null, t3, _null, t8, _null, t5, t7, t6, _null, _null, _null, _null, _null), t2, _null, t1, _null, shadowColor, resolvedShape, surfaceTintColor, _null, C.MaterialType_0);
      _this._widget.toString;
      densityAdjustment = new A.Offset(t14.horizontal, t14.vertical).$mul(0, 4);
      t1 = _this._widget.materialTapTargetSize;
      switch ((t1 == null ? theme.materialTapTargetSize : t1).index) {
        case 0:
          constraints = new A.BoxConstraints(48 + densityAdjustment._dx, 1 / 0, 48 + densityAdjustment._dy, 1 / 0);
          break;
        case 1:
          constraints = C.BoxConstraints_mlX0;
          break;
        default:
          constraints = _null;
      }
      t1 = A.Center$(result, 1, _null, 1);
      return new A.Semantics(A.SemanticsProperties$(_null, _null, _null, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null), true, false, false, new B._ChipRedirectingHitDetectionWidget(constraints, t1, _null), _null);
    }
  };
  B._ChipRedirectingHitDetectionWidget.prototype = {
    createRenderObject$1(context) {
      var t1 = new B._RenderChipRedirectingHitDetection(this.constraints, null, A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$additionalConstraints(this.constraints);
    }
  };
  B._RenderChipRedirectingHitDetection.prototype = {
    hitTest$2$position(result, position) {
      var offset;
      if (!this._box$_size.contains$1(0, position))
        return false;
      offset = new A.Offset(position._dx, this._box$_size._dy / 2);
      return result.addWithRawTransform$3$hitTest$position$transform(new B._RenderChipRedirectingHitDetection_hitTest_closure(this, offset), position, A.MatrixUtils_forceToPoint(offset));
    }
  };
  B._ChipRenderWidget.prototype = {
    get$slots() {
      return D.List_LlV;
    },
    childForSlot$1(slot) {
      switch (slot.index) {
        case 0:
          return this.theme.label;
        case 1:
          return this.theme.avatar;
        case 2:
          return this.theme.deleteIcon;
      }
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      renderObject.set$theme(_this.theme);
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      renderObject.set$textDirection(t1.textDirection);
      renderObject.value = false;
      renderObject.isEnabled = true;
      renderObject.checkmarkAnimation = _this.checkmarkAnimation;
      renderObject.avatarDrawerAnimation = _this.avatarDrawerAnimation;
      renderObject.deleteDrawerAnimation = _this.deleteDrawerAnimation;
      renderObject.enableAnimation = _this.enableAnimation;
      renderObject.avatarBorder = _this.avatarBorder;
    },
    createRenderObject$1(context) {
      var t2, t3, _this = this,
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      t1 = new B._RenderChip(false, true, _this.checkmarkAnimation, _this.avatarDrawerAnimation, _this.deleteDrawerAnimation, _this.enableAnimation, _this.avatarBorder, _this.theme, t1.textDirection, A.LinkedHashMap_LinkedHashMap$_empty(type$._ChipSlot, type$.RenderBox), A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t2 = t1.get$markNeedsPaint();
      t1.checkmarkAnimation.parent.addListener$1(0, t2);
      t3 = t1.get$markNeedsLayout();
      t1.avatarDrawerAnimation.parent.addListener$1(0, t3);
      t1.deleteDrawerAnimation.parent.addListener$1(0, t3);
      t1.enableAnimation.parent.addListener$1(0, t2);
      return t1;
    }
  };
  B._ChipSlot.prototype = {
    _enumToString$0() {
      return "_ChipSlot." + this._core$_name;
    }
  };
  B._ChipRenderTheme.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof B._ChipRenderTheme && other.avatar.super$Object$$eq(0, _this.avatar) && other.label.super$Object$$eq(0, _this.label) && other.deleteIcon.super$Object$$eq(0, _this.deleteIcon) && other.brightness === _this.brightness && other.padding.$eq(0, _this.padding) && other.labelPadding.$eq(0, _this.labelPadding) && other.showAvatar === _this.showAvatar && J.$eq$(other.checkmarkColor, _this.checkmarkColor) && other.canTapBody === _this.canTapBody;
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(_this.avatar, _this.label, _this.deleteIcon, _this.brightness, _this.padding, _this.labelPadding, _this.showAvatar, true, _this.checkmarkColor, _this.canTapBody, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  B._RenderChip.prototype = {
    set$theme(value) {
      if (this._chip$_theme.$eq(0, value))
        return;
      this._chip$_theme = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (this._chip$_textDirection === value)
        return;
      this._chip$_textDirection = value;
      this.markNeedsLayout$0();
    },
    get$children(_) {
      var t3,
        t1 = A._setArrayType([], type$.JSArray_RenderBox),
        t2 = this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t2.$index(0, D._ChipSlot_1) != null) {
        t3 = t2.$index(0, D._ChipSlot_1);
        t3.toString;
        t1.push(t3);
      }
      if (t2.$index(0, D._ChipSlot_0) != null) {
        t3 = t2.$index(0, D._ChipSlot_0);
        t3.toString;
        t1.push(t3);
      }
      if (t2.$index(0, D._ChipSlot_2) != null) {
        t2 = t2.$index(0, D._ChipSlot_2);
        t2.toString;
        t1.push(t2);
      }
      return t1;
    },
    get$sizedByParent() {
      return false;
    },
    computeMinIntrinsicWidth$1(height) {
      var t5,
        t1 = this._chip$_theme.padding.get$horizontal(),
        t2 = this._chip$_theme.labelPadding.get$horizontal(),
        t3 = this.SlottedContainerRenderObjectMixin__slotToChild,
        t4 = t3.$index(0, D._ChipSlot_1);
      t4 = t4 == null ? 0 : t4._computeIntrinsicDimension$3(C._IntrinsicDimension_0, height, t4.get$computeMinIntrinsicWidth());
      t5 = t3.$index(0, D._ChipSlot_0);
      t5 = t5 == null ? 0 : t5._computeIntrinsicDimension$3(C._IntrinsicDimension_0, height, t5.get$computeMinIntrinsicWidth());
      t3 = t3.$index(0, D._ChipSlot_2);
      t3 = t3 == null ? 0 : t3._computeIntrinsicDimension$3(C._IntrinsicDimension_0, height, t3.get$computeMinIntrinsicWidth());
      return t1 + t2 + t4 + t5 + t3;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t5,
        t1 = this._chip$_theme.padding.get$horizontal(),
        t2 = this._chip$_theme.labelPadding.get$horizontal(),
        t3 = this.SlottedContainerRenderObjectMixin__slotToChild,
        t4 = t3.$index(0, D._ChipSlot_1);
      t4 = t4 == null ? 0 : t4._computeIntrinsicDimension$3(C._IntrinsicDimension_1, height, t4.get$computeMaxIntrinsicWidth());
      t5 = t3.$index(0, D._ChipSlot_0);
      t5 = t5 == null ? 0 : t5._computeIntrinsicDimension$3(C._IntrinsicDimension_1, height, t5.get$computeMaxIntrinsicWidth());
      t3 = t3.$index(0, D._ChipSlot_2);
      t3 = t3 == null ? 0 : t3._computeIntrinsicDimension$3(C._IntrinsicDimension_1, height, t3.get$computeMaxIntrinsicWidth());
      return t1 + t2 + t4 + t5 + t3;
    },
    computeMinIntrinsicHeight$1(width) {
      var t3, t4, t5,
        t1 = this._chip$_theme.padding,
        t2 = t1.get$_top(t1);
      t1 = t1.get$_bottom(t1);
      t3 = this._chip$_theme.labelPadding;
      t4 = t3.get$_top(t3);
      t3 = t3.get$_bottom(t3);
      t5 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0);
      t5 = t5 == null ? 0 : t5._computeIntrinsicDimension$3(C._IntrinsicDimension_2, width, t5.get$computeMinIntrinsicHeight());
      return Math.max(32, t2 + t1 + (t4 + t3) + t5);
    },
    computeMaxIntrinsicHeight$1(width) {
      return this.computeMinIntrinsicHeight$1(width);
    },
    computeDistanceToActualBaseline$1(baseline) {
      return this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0).getDistanceToActualBaseline$1(baseline);
    },
    _layoutLabel$5(contentConstraints, iconSizes, size, rawSize, layoutChild) {
      var maxWidth, updatedSize, t2, t3, t4, _this = this,
        t1 = contentConstraints.maxWidth;
      if (isFinite(t1)) {
        maxWidth = Math.max(0, t1 - iconSizes - _this._chip$_theme.labelPadding.get$horizontal() - _this._chip$_theme.padding.get$horizontal());
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0);
        t1.toString;
        updatedSize = layoutChild.call$2(t1, new A.BoxConstraints(0, maxWidth, rawSize._dy, size._dy));
        t1 = updatedSize._dx;
        t2 = _this._chip$_theme.labelPadding.get$horizontal();
        t3 = updatedSize._dy;
        t4 = _this._chip$_theme.labelPadding;
        return new A.Size(t1 + t2, t3 + (t4.get$_top(t4) + t4.get$_bottom(t4)));
      }
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0);
      t1.toString;
      updatedSize = layoutChild.call$2(t1, new A.BoxConstraints(0, size._dx, rawSize._dy, size._dy));
      t1 = updatedSize._dx;
      t2 = _this._chip$_theme.labelPadding.get$horizontal();
      t3 = updatedSize._dy;
      t4 = _this._chip$_theme.labelPadding;
      return new A.Size(t1 + t2, t3 + (t4.get$_top(t4) + t4.get$_bottom(t4)));
    },
    _layoutAvatar$3(contentConstraints, contentSize, layoutChild) {
      var avatarBoxSize, t2, avatarWidth,
        requestedSize = Math.max(0, contentSize),
        avatarConstraints = A.BoxConstraints$tightFor(requestedSize, requestedSize),
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_1);
      t1.toString;
      avatarBoxSize = layoutChild.call$2(t1, avatarConstraints);
      t1 = this._chip$_theme;
      t2 = this.avatarDrawerAnimation;
      avatarWidth = t1.showAvatar ? 0 + t2.get$value(t2) * avatarBoxSize._dx : 0 + t2.get$value(t2) * contentSize;
      return new A.Size(avatarWidth, 0 + avatarBoxSize._dy);
    },
    _layoutDeleteIcon$3(contentConstraints, contentSize, layoutChild) {
      var boxSize,
        requestedSize = Math.max(0, contentSize),
        deleteIconConstraints = A.BoxConstraints$tightFor(requestedSize, requestedSize),
        t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_2);
      t1.toString;
      boxSize = layoutChild.call$2(t1, deleteIconConstraints);
      t1 = this.deleteDrawerAnimation;
      if (t1.get$status(t1) === C.AnimationStatus_0)
        return new A.Size(0, contentSize);
      t1 = this.deleteDrawerAnimation;
      return new A.Size(0 + t1.get$value(t1) * boxSize._dx, 0 + boxSize._dy);
    },
    hitTest$2$position(result, position) {
      var t1, t2, t3, t4, hitIsOnDeleteIcon, hitTestChild, center, _this = this;
      if (!_this._box$_size.contains$1(0, position))
        return false;
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t1.$index(0, D._ChipSlot_2) != null) {
        t2 = _this._chip$_theme;
        t3 = _this._box$_size;
        t3.toString;
        t4 = t1.$index(0, D._ChipSlot_2)._box$_size;
        t4.toString;
        hitIsOnDeleteIcon = B._hitIsOnDeleteIcon(t3, t4, t2.padding, position, _this._chip$_textDirection);
      } else
        hitIsOnDeleteIcon = false;
      if (hitIsOnDeleteIcon) {
        t2 = t1.$index(0, D._ChipSlot_2);
        if (t2 == null)
          t2 = t1.$index(0, D._ChipSlot_0);
        hitTestChild = t2 == null ? t1.$index(0, D._ChipSlot_1) : t2;
      } else {
        t2 = t1.$index(0, D._ChipSlot_0);
        hitTestChild = t2 == null ? t1.$index(0, D._ChipSlot_1) : t2;
      }
      if (hitTestChild != null) {
        center = hitTestChild._box$_size.center$1(C.Offset_0_0);
        return result.addWithRawTransform$3$hitTest$position$transform(new B._RenderChip_hitTest_closure(center, hitTestChild), position, A.MatrixUtils_forceToPoint(center));
      }
      return false;
    },
    computeDryLayout$1(constraints) {
      return this._chip$_computeSizes$2(constraints, A.layout_helper_ChildLayoutHelper_dryLayoutChild$closure()).size;
    },
    _chip$_computeSizes$2(constraints, layoutChild) {
      var rawLabelSize, t2, t3, t4, t5, t6, contentSize, avatarSize, deleteIconSize, labelSize, overallSize, _this = this,
        contentConstraints = new A.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight),
        t1 = _this._chip$_theme.visualDensity,
        densityAdjustment = new A.Offset(0, new A.Offset(t1.horizontal, t1.vertical).$mul(0, 4)._dy / 2);
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0);
      t1.toString;
      rawLabelSize = layoutChild.call$2(t1, contentConstraints);
      t1 = _this._chip$_theme.padding;
      t2 = t1.get$_top(t1);
      t1 = t1.get$_bottom(t1);
      t3 = _this._chip$_theme.labelPadding;
      t4 = t3.get$_top(t3);
      t3 = t3.get$_bottom(t3);
      t5 = rawLabelSize._dy;
      t6 = _this._chip$_theme.labelPadding;
      contentSize = Math.max(32 - (t2 + t1) + (t4 + t3), t5 + (t6.get$_top(t6) + t6.get$_bottom(t6)));
      avatarSize = _this._layoutAvatar$3(contentConstraints, contentSize, layoutChild);
      deleteIconSize = _this._layoutDeleteIcon$3(contentConstraints, contentSize, layoutChild);
      t6 = avatarSize._dx;
      t5 = deleteIconSize._dx;
      labelSize = _this._layoutLabel$5(contentConstraints, t6 + t5, new A.Size(rawLabelSize._dx, contentSize), rawLabelSize, layoutChild);
      overallSize = new A.Size(t6 + labelSize._dx + t5, contentSize).$add(0, densityAdjustment);
      t5 = _this._chip$_theme.padding.get$horizontal();
      t6 = _this._chip$_theme.padding;
      return new B._ChipSizes(constraints.constrain$1(new A.Size(overallSize._dx + t5, overallSize._dy + (t6.get$_top(t6) + t6.get$_bottom(t6)))), overallSize, contentSize, avatarSize, labelSize, deleteIconSize, densityAdjustment);
    },
    performLayout$0() {
      var t3, avatarOffset, start, labelOffset, t4, t5, deleteIconOffset, t6, t7, _this = this,
        t1 = type$.BoxConstraints,
        sizes = _this._chip$_computeSizes$2(t1._as(A.RenderObject.prototype.get$constraints.call(_this)), A.layout_helper_ChildLayoutHelper_layoutChild$closure()),
        t2 = sizes.overall,
        right = t2._dx,
        centerLayout = new B._RenderChip_performLayout_centerLayout(_this, sizes);
      switch (_this._chip$_textDirection.index) {
        case 0:
          t3 = sizes.avatar;
          avatarOffset = centerLayout.call$2(t3, right);
          start = right - t3._dx;
          t3 = sizes.label;
          labelOffset = centerLayout.call$2(t3, start);
          t4 = _this.deleteDrawerAnimation;
          if (t4.get$status(t4) !== C.AnimationStatus_0) {
            t4 = sizes.deleteIcon;
            t5 = _this._chip$_theme.padding;
            _this.___RenderChip__deleteButtonRect_A = new A.Rect(0, 0, 0 + (t4._dx + t5.right), 0 + (t2._dy + (t5.get$_top(t5) + t5.get$_bottom(t5))));
            deleteIconOffset = centerLayout.call$2(t4, start - t3._dx);
          } else {
            _this.___RenderChip__deleteButtonRect_A = C.Rect_0_0_0_0;
            deleteIconOffset = C.Offset_0_0;
          }
          t3 = _this._chip$_theme;
          if (t3.canTapBody) {
            t4 = _this.___RenderChip__deleteButtonRect_A;
            t4 === $ && A.throwUnnamedLateFieldNI();
            t4 = t4.right - t4.left;
            t3 = t3.padding.get$horizontal();
            t5 = _this._chip$_theme.padding;
            _this.___RenderChip__pressRect_A = new A.Rect(t4, 0, t4 + (right - t4 + t3), 0 + (t2._dy + (t5.get$_top(t5) + t5.get$_bottom(t5))));
          } else
            _this.___RenderChip__pressRect_A = C.Rect_0_0_0_0;
          break;
        case 1:
          t3 = sizes.avatar;
          t4 = _this.SlottedContainerRenderObjectMixin__slotToChild;
          t5 = t4.$index(0, D._ChipSlot_1);
          if (t5 == null)
            t5 = C.Size_0_0;
          else {
            t5 = t5._box$_size;
            t5.toString;
          }
          t6 = t3._dx;
          avatarOffset = centerLayout.call$2(t3, 0 - t5._dx + t6);
          start = 0 + t6;
          t3 = sizes.label;
          labelOffset = centerLayout.call$2(t3, start);
          start += t3._dx;
          if (_this._chip$_theme.canTapBody) {
            t3 = _this.deleteDrawerAnimation;
            t3 = t3.get$status(t3);
            t5 = _this._chip$_theme.padding;
            t3 = t3 !== C.AnimationStatus_0 ? start + t5.left : right + t5.get$horizontal();
            t5 = _this._chip$_theme.padding;
            _this.___RenderChip__pressRect_A = new A.Rect(0, 0, 0 + t3, 0 + (t2._dy + (t5.get$_top(t5) + t5.get$_bottom(t5))));
          } else
            _this.___RenderChip__pressRect_A = C.Rect_0_0_0_0;
          t3 = t4.$index(0, D._ChipSlot_2);
          if (t3 == null)
            t3 = C.Size_0_0;
          else {
            t3 = t3._box$_size;
            t3.toString;
          }
          t4 = sizes.deleteIcon;
          t5 = t4._dx;
          start -= t3._dx - t5;
          t3 = _this.deleteDrawerAnimation;
          if (t3.get$status(t3) !== C.AnimationStatus_0) {
            deleteIconOffset = centerLayout.call$2(t4, start);
            t3 = _this._chip$_theme.padding;
            t4 = start + t3.left;
            _this.___RenderChip__deleteButtonRect_A = new A.Rect(t4, 0, t4 + (t5 + t3.right), 0 + (t2._dy + (t3.get$_top(t3) + t3.get$_bottom(t3))));
          } else {
            _this.___RenderChip__deleteButtonRect_A = C.Rect_0_0_0_0;
            deleteIconOffset = C.Offset_0_0;
          }
          break;
        default:
          avatarOffset = C.Offset_0_0;
          labelOffset = C.Offset_0_0;
          deleteIconOffset = C.Offset_0_0;
      }
      t3 = _this._chip$_theme.labelPadding;
      t4 = t3.get$_top(t3);
      t3 = t3.get$_bottom(t3);
      t5 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      t6 = t5.$index(0, D._ChipSlot_0);
      if (t6 == null)
        t6 = C.Size_0_0;
      else {
        t6 = t6._box$_size;
        t6.toString;
      }
      labelOffset = labelOffset.$add(0, new A.Offset(0, (sizes.label._dy - (t4 + t3) - t6._dy) / 2));
      t6 = t5.$index(0, D._ChipSlot_1).parentData;
      t6.toString;
      t3 = type$.BoxParentData;
      t3._as(t6);
      t4 = _this._chip$_theme.padding;
      t6.offset = new A.Offset(t4.left, t4.top).$add(0, avatarOffset);
      t4 = t5.$index(0, D._ChipSlot_0).parentData;
      t4.toString;
      t3._as(t4);
      t6 = _this._chip$_theme.padding;
      t6 = new A.Offset(t6.left, t6.top).$add(0, labelOffset);
      t7 = _this._chip$_theme.labelPadding;
      t4.offset = t6.$add(0, new A.Offset(t7.left, t7.top));
      t5 = t5.$index(0, D._ChipSlot_2).parentData;
      t5.toString;
      t3._as(t5);
      t3 = _this._chip$_theme.padding;
      t5.offset = new A.Offset(t3.left, t3.top).$add(0, deleteIconOffset);
      t3 = _this._chip$_theme.padding.get$horizontal();
      t5 = _this._chip$_theme.padding;
      t7 = t5.get$_top(t5);
      t5 = t5.get$_bottom(t5);
      _this._box$_size = t1._as(A.RenderObject.prototype.get$constraints.call(_this)).constrain$1(new A.Size(right + t3, t2._dy + (t7 + t5)));
    },
    get$_chip$_disabledColor() {
      var enableTween,
        t1 = this.enableAnimation;
      t1 = t1.get$status(t1);
      if (t1 === C.AnimationStatus_3)
        return C.Color_4294967295;
      switch (this._chip$_theme.brightness.index) {
        case 1:
          enableTween = new A.ColorTween(A.Color$fromARGB(97, 255, 255, 255), C.Color_4294967295);
          break;
        case 0:
          enableTween = new A.ColorTween(A.Color$fromARGB(97, 0, 0, 0), C.Color_4278190080);
          break;
        default:
          enableTween = null;
      }
      t1 = this.enableAnimation;
      t1 = enableTween.transform$1(0, t1.get$value(t1));
      t1.toString;
      return t1;
    },
    _paintCheck$3(canvas, origin, size) {
      var paint, t2, t, path, t3, t4, mid, t5, t6, t7, t8, _this = this,
        t1 = _this._chip$_theme,
        paintColor = t1.checkmarkColor;
      if (!(paintColor != null))
        switch (t1.brightness.index) {
          case 1:
            paintColor = t1.showAvatar ? C.Color_4294967295 : A.Color$fromARGB(222, 0, 0, 0);
            break;
          case 0:
            paintColor = t1.showAvatar ? C.Color_4278190080 : A.Color$fromARGB(222, 255, 255, 255);
            break;
          default:
            paintColor = null;
        }
      t1 = _this.checkmarkAnimation.parent;
      if (t1.get$status(t1) === C.AnimationStatus_2) {
        t1 = _this.checkmarkAnimation;
        paintColor = new A.ColorTween(C.Color_0, paintColor).transform$1(0, t1.get$value(t1));
      }
      t1 = $.$get$_renderer();
      paint = t1.createPaint$0();
      paintColor.toString;
      paint.set$color(0, paintColor);
      paint.set$style(0, C.PaintingStyle_1);
      t2 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      paint.set$strokeWidth(2 * (t2.$index(0, D._ChipSlot_1) != null ? t2.$index(0, D._ChipSlot_1)._box$_size._dy / 24 : 1));
      t2 = _this.checkmarkAnimation.parent;
      if (t2.get$status(t2) === C.AnimationStatus_2)
        t = 1;
      else {
        t2 = _this.checkmarkAnimation;
        t = t2.get$value(t2);
      }
      if (t === 0)
        return;
      path = t1.createPath$0();
      t1 = size * 0.15;
      t2 = size * 0.45;
      t3 = size * 0.4;
      t4 = size * 0.7;
      mid = new A.Offset(t3, t4);
      t5 = origin._dx;
      t6 = origin._dy;
      t7 = t5 + t1;
      t8 = t6 + t2;
      if (t < 0.5) {
        t1 = A.Offset_lerp(new A.Offset(t1, t2), mid, t * 2);
        t1.toString;
        path.moveTo$2(0, t7, t8);
        path.lineTo$2(0, t5 + t1._dx, t6 + t1._dy);
      } else {
        t1 = A.Offset_lerp(mid, new A.Offset(size * 0.85, size * 0.25), (t - 0.5) * 2);
        t1.toString;
        path.moveTo$2(0, t7, t8);
        path.lineTo$2(0, t5 + t3, t6 + t4);
        path.lineTo$2(0, t5 + t1._dx, t6 + t1._dy);
      }
      canvas.drawPath$2(path, paint);
    },
    _paintAvatar$2(context, offset) {
      var t2, disabledColor, disabledColorAlpha, t3, t4, t5, _this = this,
        t1 = new B._RenderChip__paintAvatar_paintWithOverlay(_this);
      if (!_this._chip$_theme.showAvatar) {
        t2 = _this.avatarDrawerAnimation;
        t2 = t2.get$status(t2) === C.AnimationStatus_0;
      } else
        t2 = false;
      if (t2)
        return;
      disabledColor = _this.get$_chip$_disabledColor();
      disabledColorAlpha = disabledColor.get$value(disabledColor) >>> 24 & 255;
      t2 = _this.__RenderObject__needsCompositing_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      if (t2)
        context.pushLayer$3(A.OpacityLayer$(disabledColorAlpha), t1, offset);
      else {
        t2 = disabledColorAlpha !== 255;
        if (t2) {
          t3 = context.get$canvas(context);
          t4 = B._RenderChip__boxRect(_this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_1)).shift$1(offset).inflate$1(20);
          t5 = $.$get$_renderer().createPaint$0();
          t5.set$color(0, disabledColor);
          t3.saveLayer$2(t4, t5);
        }
        t1.call$2(context, offset);
        if (t2)
          context.get$canvas(context).restore$0(0);
      }
    },
    _paintChild$4(context, offset, child, isEnabled) {
      var t1, t2, childRect, t3, _this = this;
      if (child == null)
        return;
      t1 = _this.get$_chip$_disabledColor();
      t1 = t1.get$value(t1);
      t2 = _this.enableAnimation;
      if (t2.get$status(t2) !== C.AnimationStatus_3) {
        t2 = _this.__RenderObject__needsCompositing_A;
        t2 === $ && A.throwUnnamedLateFieldNI();
        if (t2)
          context.pushLayer$3(A.OpacityLayer$(t1 >>> 24 & 255), new B._RenderChip__paintChild_closure(child), offset);
        else {
          childRect = B._RenderChip__boxRect(child).shift$1(offset);
          t1 = context.get$canvas(context);
          t2 = childRect.inflate$1(20);
          t3 = $.$get$_renderer().createPaint$0();
          t3.set$color(0, _this.get$_chip$_disabledColor());
          t1.saveLayer$2(t2, t3);
          t3 = child.parentData;
          t3.toString;
          context.paintChild$2(child, type$.BoxParentData._as(t3).offset.$add(0, offset));
          context.get$canvas(context).restore$0(0);
        }
      } else {
        t1 = child.parentData;
        t1.toString;
        context.paintChild$2(child, type$.BoxParentData._as(t1).offset.$add(0, offset));
      }
    },
    paint$2(context, offset) {
      var t1, _this = this;
      _this._paintAvatar$2(context, offset);
      t1 = _this.deleteDrawerAnimation;
      if (t1.get$status(t1) !== C.AnimationStatus_0)
        _this._paintChild$4(context, offset, _this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_2), true);
      _this._paintChild$4(context, offset, _this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, D._ChipSlot_0), true);
    },
    hitTestSelf$1(position) {
      var t1 = this.___RenderChip__deleteButtonRect_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      if (!t1.contains$1(0, position)) {
        t1 = this.___RenderChip__pressRect_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.contains$1(0, position);
      } else
        t1 = true;
      return t1;
    }
  };
  B._ChipSizes.prototype = {};
  B._UnconstrainedInkSplashFactory.prototype = {
    create$11$borderRadius$color$containedInkWell$controller$customBorder$onRemoved$position$radius$rectCallback$referenceBox$textDirection(_, borderRadius, color, containedInkWell, controller, customBorder, onRemoved, position, radius, rectCallback, referenceBox, textDirection) {
      return this.parentFactory.create$10$borderRadius$color$controller$customBorder$onRemoved$position$radius$rectCallback$referenceBox$textDirection(0, borderRadius, color, controller, customBorder, onRemoved, position, radius, rectCallback, referenceBox, textDirection);
    }
  };
  B.__ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    updateRenderObject$2(context, renderObject) {
      return this.super$RenderObjectWidget$updateRenderObject(context, renderObject);
    }
  };
  B.__RawChipState_State_MaterialStateMixin.prototype = {};
  B.__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  B.__RenderChip_RenderBox_SlottedContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var t1, t2, _i;
      this.super$RenderObject$attach(owner);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attach$1(owner);
    },
    detach$0(_) {
      var t1, t2, _i;
      this.super$AbstractNode$detach(0);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].detach$0(0);
    }
  };
  B._ChildEntry.prototype = {
    toString$0(_) {
      return "Entry#" + A.shortHash(this) + "(" + this.widgetChild.toString$0(0) + ")";
    }
  };
  B.AnimatedSwitcher.prototype = {
    createState$0() {
      return new B._AnimatedSwitcherState(A.LinkedHashSet_LinkedHashSet$_empty(type$._ChildEntry), C.List_empty18, null, null, C._StateLifecycle_0);
    },
    transitionBuilder$2(arg0, arg1) {
      return B.animated_switcher_AnimatedSwitcher_defaultTransitionBuilder$closure().call$2(arg0, arg1);
    },
    layoutBuilder$2(arg0, arg1) {
      return B.animated_switcher_AnimatedSwitcher_defaultLayoutBuilder$closure().call$2(arg0, arg1);
    }
  };
  B._AnimatedSwitcherState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._addEntryForNewChild$1$animate(false);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, hasNewChild, t2, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      t1 = t1.child;
      hasNewChild = t1 != null;
      t2 = _this._currentEntry;
      if (hasNewChild === (t2 != null))
        if (hasNewChild) {
          t2 = t2.widgetChild;
          t1 = !(A.getRuntimeType(t1) === A.getRuntimeType(t2) && J.$eq$(t1.key, t2.key));
        } else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        ++_this._childNumber;
        _this._addEntryForNewChild$1$animate(true);
      } else {
        t1 = _this._currentEntry;
        if (t1 != null) {
          t2 = _this._widget.child;
          t2.toString;
          t1.widgetChild = t2;
          _this._updateTransitionForEntry$1(t1);
          _this._outgoingWidgets = null;
        }
      }
    },
    _addEntryForNewChild$1$animate(animate) {
      var controller, animation, _this = this,
        t1 = _this._currentEntry;
      if (t1 != null) {
        _this._outgoingEntries.add$1(0, t1);
        _this._currentEntry.controller.reverse$0(0);
        _this._currentEntry = _this._outgoingWidgets = null;
      }
      t1 = _this._widget;
      if (t1.child == null)
        return;
      controller = A.AnimationController$(C.AnimationBehavior_0, null, t1.duration, 0, null, 1, null, _this);
      animation = A.CurvedAnimation$(_this._widget.switchInCurve, controller, C.C__Linear);
      t1 = _this._widget.child;
      t1.toString;
      _this._currentEntry = _this._newEntry$4$animation$builder$child$controller(animation, B.animated_switcher_AnimatedSwitcher_defaultTransitionBuilder$closure(), t1, controller);
      if (animate)
        controller.forward$0(0);
      else
        controller.set$value(0, 1);
    },
    _newEntry$4$animation$builder$child$controller(animation, builder, child, controller) {
      var t1 = builder.call$2(child, animation),
        t2 = this._childNumber,
        t3 = t1.key,
        entry = new B._ChildEntry(controller, animation, new A.KeyedSubtree(t1, t3 != null ? new A.ValueKey(t3, type$.ValueKey_Key) : new A.ValueKey(t2, type$.ValueKey_int)), child);
      animation.parent.addStatusListener$1(new B._AnimatedSwitcherState__newEntry_closure(this, entry, controller));
      return entry;
    },
    _updateTransitionForEntry$1(entry) {
      var t1 = entry.transition;
      entry.transition = new A.KeyedSubtree(this._widget.transitionBuilder$2(entry.widgetChild, entry.animation), t1.key);
    },
    _rebuildOutgoingWidgetsIfNeeded$0() {
      if (this._outgoingWidgets == null) {
        var t1 = this._outgoingEntries;
        this._outgoingWidgets = A.List_List$unmodifiable(new A.EfficientLengthMappedIterable(t1, new B._AnimatedSwitcherState__rebuildOutgoingWidgetsIfNeeded_closure(), A._instanceType(t1)._eval$1("EfficientLengthMappedIterable<SetMixin.E,Widget>")), type$.Widget);
      }
    },
    dispose$0() {
      var t2, t3, t4, value, result,
        t1 = this._currentEntry;
      if (t1 != null)
        t1.controller.dispose$0();
      for (t1 = this._outgoingEntries, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        t3 = (t3 == null ? t2._as(t3) : t3).controller;
        t3._ticker.dispose$0();
        t3._ticker = null;
        t4 = t3.AnimationLocalStatusListenersMixin__statusListeners;
        t4._isDirty = false;
        C.JSArray_methods.clear$0(t4._list);
        value = t4.__ObserverList__set_FI;
        if (value === $) {
          result = A.HashSet_HashSet(t4.$ti._precomputed1);
          t4.__ObserverList__set_FI !== $ && A.throwUnnamedLateFieldADI();
          t4.__ObserverList__set_FI = result;
          value = result;
        }
        if (value._collection$_length > 0) {
          value._collection$_strings = value._collection$_nums = value._collection$_rest = value._elements = null;
          value._collection$_length = 0;
        }
        t4 = t3.AnimationLocalListenersMixin__listeners;
        t4._isDirty = false;
        C.JSArray_methods.clear$0(t4._list);
        value = t4.__ObserverList__set_FI;
        if (value === $) {
          result = A.HashSet_HashSet(t4.$ti._precomputed1);
          t4.__ObserverList__set_FI !== $ && A.throwUnnamedLateFieldADI();
          t4.__ObserverList__set_FI = result;
          value = result;
        }
        if (value._collection$_length > 0) {
          value._collection$_strings = value._collection$_nums = value._collection$_rest = value._elements = null;
          value._collection$_length = 0;
        }
        t3.super$AnimationEagerListenerMixin$dispose();
      }
      this.super$__AnimatedSwitcherState_State_TickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var t1, t2, t3, t4, _this = this;
      _this._rebuildOutgoingWidgetsIfNeeded$0();
      t1 = _this._widget;
      t1.toString;
      t2 = _this._currentEntry;
      t2 = t2 == null ? null : t2.transition;
      t3 = _this._outgoingWidgets;
      t3.toString;
      t4 = A._arrayInstanceType(t3)._eval$1("WhereIterable<1>");
      t4 = A.LinkedHashSet_LinkedHashSet$of(new A.WhereIterable(t3, new B._AnimatedSwitcherState_build_closure(_this), t4), t4._eval$1("Iterable.E"));
      return t1.layoutBuilder$2(t2, A.List_List$of(t4, true, A._instanceType(t4)._eval$1("SetMixin.E")));
    }
  };
  B.__AnimatedSwitcherState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  B.SizeChangedLayoutNotification.prototype = {};
  B.SizeChangedLayoutNotifier.prototype = {
    createRenderObject$1(context) {
      var t1 = new B._RenderSizeChangedWithCallback(new B.SizeChangedLayoutNotifier_createRenderObject_closure(context), null, A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    }
  };
  B._RenderSizeChangedWithCallback.prototype = {
    performLayout$0() {
      var t1, _this = this;
      _this.super$RenderProxyBoxMixin$performLayout();
      t1 = _this._oldSize;
      if (t1 != null && !_this._box$_size.$eq(0, t1))
        _this.onLayoutChangedCallback.call$0();
      t1 = _this._box$_size;
      t1.toString;
      _this._oldSize = t1;
    }
  };
  B.SuggestionsBoxController.prototype = {
    open$0(_) {
      var t1, t2, _this = this;
      if (_this._isOpened)
        return;
      t1 = _this.context.findAncestorStateOfType$1$0(type$.OverlayState);
      t1.toString;
      t2 = _this.overlayEntry;
      t2.toString;
      t1.insert$1(0, t2);
      _this._isOpened = true;
    },
    close$0(_) {
      if (!this._isOpened)
        return;
      this.overlayEntry.remove$0(0);
      this._isOpened = false;
    }
  };
  B.TagEditor.prototype = {
    createState$0() {
      return new B.TagsEditorState(new A.LayerLink(), A.ValueNotifier$(0, type$.int), A.ValueNotifier$(null, type$.nullable_String), C._StateLifecycle_0, this.$ti._eval$1("TagsEditorState<1>"));
    },
    tagBuilder$2(arg0, arg1) {
      return this.tagBuilder.call$2(arg0, arg1);
    },
    findSuggestions$1(arg0) {
      return this.findSuggestions.call$1(arg0);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  B.TagsEditorState.prototype = {
    initState$0() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget.controller;
      _this.__TagsEditorState__textFieldController_A = t1;
      t1 = A.FocusNode$(true, _null, true, true, _null, _null, false);
      t1.addListener$1(0, _this.get$_onFocusKeyboardChanged());
      _this.__TagsEditorState__focusNodeKeyboard_A = t1;
      t1 = _this._widget.focusNode;
      if (t1 == null)
        t1 = A.FocusNode$(true, _null, true, true, _null, _null, false);
      t1.addListener$1(0, _this.get$_onFocusChanged());
      _this.__TagsEditorState__focusNode_A = t1;
      _this._widget.toString;
      _this._initializeSuggestionBox$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this._widget;
      if (t1.autoDisposeFocusNode || t1.focusNode == null) {
        t1 = _this.__TagsEditorState__focusNode_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.removeListener$1(0, _this.get$_onFocusChanged());
        _this.__TagsEditorState__focusNode_A.dispose$0();
      }
      t1 = _this._suggestionsStreamController;
      if (t1 != null)
        t1.close$0(0);
      t1 = _this._suggestionsBoxController;
      if (t1 != null)
        t1.close$0(0);
      t1 = _this.__TagsEditorState__focusNodeKeyboard_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.removeListener$1(0, _this.get$_onFocusKeyboardChanged());
      _this.__TagsEditorState__focusNodeKeyboard_A.dispose$0();
      _this._highlightedOptionIndex.dispose$0();
      _this._validationSuggestionItemNotifier.dispose$0();
      t1 = _this._deBouncer;
      if (t1 != null)
        t1.cancel$0(0);
      _this.super$State$dispose();
    },
    _updateHighlight$1(newIndex) {
      var t1 = this._suggestions;
      if ((t1 == null ? null : J.get$isNotEmpty$asx(t1)) === true) {
        t1 = this._suggestions;
        t1.toString;
        t1 = C.JSInt_methods.$mod(newIndex, J.get$length$asx(t1));
      } else
        t1 = 0;
      this._highlightedOptionIndex.set$value(0, t1);
    },
    _initializeSuggestionBox$0() {
      var _this = this,
        t1 = _this._widget.debounceDuration;
      t1 = _this._deBouncer = A.Debouncer$(t1, "", type$.String);
      t1.get$values(t1).listen$1(_this.get$_onSearchChanged());
      t1 = _this._framework$_element;
      t1.toString;
      _this._suggestionsBoxController = new B.SuggestionsBoxController(t1);
      _this._suggestionsStreamController = new A._AsyncBroadcastStreamController(null, null, _this.$ti._eval$1("_AsyncBroadcastStreamController<List<1>?>"));
      $.WidgetsBinding__instance.SchedulerBinding__postFrameCallbacks.push(new B.TagsEditorState__initializeSuggestionBox_closure(_this));
    },
    _onFocusChanged$0() {
      var _this = this,
        t1 = _this.__TagsEditorState__focusNode_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      if (t1.get$hasFocus()) {
        _this._widget.onFocusTagAction.call$1(false);
        _this._countBackspacePressed = 0;
        _this._scrollToVisible$0();
        t1 = _this._suggestionsBoxController;
        if (t1 != null)
          t1.open$0(0);
      } else {
        t1 = _this._suggestionsBoxController;
        if (t1 != null)
          t1.close$0(0);
      }
      if (_this._framework$_element != null)
        _this.setState$1(new B.TagsEditorState__onFocusChanged_closure(_this));
    },
    _onFocusKeyboardChanged$0() {
      var t2, _this = this,
        t1 = _this.__TagsEditorState__focusNodeKeyboard_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1 = t1.get$hasFocus();
      t2 = _this._widget;
      if (t1) {
        t2.onFocusTagAction.call$1(true);
        _this._countBackspacePressed = 1;
      } else {
        t2.onFocusTagAction.call$1(false);
        _this._countBackspacePressed = 0;
      }
    },
    _createOverlayEntry$0() {
      var t1 = this._suggestionsBoxController;
      if (t1 != null)
        t1.overlayEntry = A.OverlayEntry$(new B.TagsEditorState__createOverlayEntry_closure(this), false);
    },
    _onTextFieldChange$1(string) {
      var t1, _this = this;
      if (string !== _this._previousText) {
        t1 = _this._deBouncer;
        if (t1 != null)
          t1.set$value(0, string);
      }
      _this._previousText = string;
      if (string.length !== 0)
        _this._widget.toString;
      return;
    },
    _onSearchChanged$1(value) {
      return this._onSearchChanged$body$TagsEditorState(value);
    },
    _onSearchChanged$body$TagsEditorState(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t2, t1, results;
      var $async$_onSearchChanged$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = ++$async$self._searchId;
              $async$goto = 2;
              return A._asyncAwait($async$self._widget.findSuggestions$1(value), $async$_onSearchChanged$1);
            case 2:
              // returning from await.
              results = $async$result;
              if ($async$self._searchId === t1 && $async$self._framework$_element != null)
                $async$self.setState$1(new B.TagsEditorState__onSearchChanged_closure($async$self, results));
              $async$self._updateHighlight$1(0);
              $async$self._validationSuggestionItemNotifier.set$value(0, value);
              t1 = $async$self._suggestionsStreamController;
              if (t1 != null) {
                t2 = $async$self._suggestions;
                t1.add$1(0, t2 == null ? A._setArrayType([], $async$self.$ti._eval$1("JSArray<1>")) : t2);
              }
              t1 = $async$self._suggestionsBoxController;
              if (t1 != null)
                t1.open$0(0);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_onSearchChanged$1, $async$completer);
    },
    closeSuggestionBox$0() {
      var t1, _this = this;
      _this._suggestions = null;
      t1 = _this._suggestionsStreamController;
      if (t1 != null)
        t1.add$1(0, A._setArrayType([], _this.$ti._eval$1("JSArray<1>")));
      _this._updateHighlight$1(0);
      _this._validationSuggestionItemNotifier.set$value(0, null);
      t1 = _this._suggestionsBoxController;
      if (t1 != null)
        t1.close$0(0);
    },
    _scrollToVisible$0() {
      A.Future_Future$delayed(C.Duration_300000, new B.TagsEditorState__scrollToVisible_closure(this), type$.Null);
    },
    _tag_editor$_onSubmitted$1(string) {
      var currentHighlightIndex, optionSelected, _this = this,
        t1 = _this._suggestions;
      if ((t1 == null ? null : J.get$isNotEmpty$asx(t1)) === true) {
        t1 = _this._suggestionsBoxController;
        t1 = (t1 == null ? null : t1._isOpened) === true;
      } else
        t1 = false;
      if (t1) {
        currentHighlightIndex = _this._highlightedOptionIndex._change_notifier$_value;
        t1 = _this._suggestions;
        if ((t1 == null ? null : J.get$isNotEmpty$asx(t1)) === true)
          if (currentHighlightIndex >= 0) {
            t1 = _this._suggestions;
            t1.toString;
            t1 = currentHighlightIndex < J.get$length$asx(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          t1 = _this._suggestions;
          t1.toString;
          optionSelected = J.$index$asx(t1, currentHighlightIndex);
          _this._widget.onSelectOptionAction.call$1(optionSelected);
          _this.resetTextField$0();
          _this.closeSuggestionBox$0();
        }
      } else {
        _this._widget.onSubmitted.call$1(string);
        _this._widget.toString;
        _this.resetTextField$0();
      }
      _this._widget.toString;
      t1 = _this.__TagsEditorState__focusNode_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.requestFocus$0();
    },
    resetTextField$0() {
      var _this = this,
        t1 = _this.__TagsEditorState__textFieldController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.set$text(0, "");
      _this._previousText = "";
      _this._updateHighlight$1(0);
      _this._validationSuggestionItemNotifier.set$value(0, null);
    },
    _onKeyboardBackspaceListener$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$_onKeyboardBackspaceListener$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.__TagsEditorState__textFieldController_A;
              t1 === $ && A.throwUnnamedLateFieldNI();
              if (t1._change_notifier$_value.text.length === 0 && $async$self._widget.length > 0) {
                t1 = ++$async$self._countBackspacePressed;
                if (t1 === 1) {
                  t1 = $async$self.__TagsEditorState__focusNode_A;
                  t1 === $ && A.throwUnnamedLateFieldNI();
                  t1.unfocus$0();
                  t1 = $async$self.__TagsEditorState__focusNodeKeyboard_A;
                  t1 === $ && A.throwUnnamedLateFieldNI();
                  t1.requestFocus$0();
                } else if (t1 >= 2) {
                  $async$self._widget.onDeleteTagAction.call$0();
                  if ($async$self._widget.length > 1)
                    $async$self._countBackspacePressed = 1;
                  else {
                    $async$self._countBackspacePressed = 0;
                    t1 = $async$self.__TagsEditorState__focusNodeKeyboard_A;
                    t1 === $ && A.throwUnnamedLateFieldNI();
                    t1.unfocus$0();
                    t1 = $async$self.__TagsEditorState__focusNode_A;
                    t1 === $ && A.throwUnnamedLateFieldNI();
                    t1.requestFocus$0();
                  }
                }
              } else {
                t1 = $async$self.__TagsEditorState__focusNodeKeyboard_A;
                t1 === $ && A.throwUnnamedLateFieldNI();
                t1.unfocus$0();
                t1 = $async$self.__TagsEditorState__focusNode_A;
                t1 === $ && A.throwUnnamedLateFieldNI();
                t1.requestFocus$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_onKeyboardBackspaceListener$0, $async$completer);
    },
    build$1(context) {
      var t3, t4, t5, t6, t7, t8, _list, t9, index, t10, t11, t12, t13, t14, t15, t16, tagEditorArea, _this = this, _null = null,
        t1 = _this._widget,
        decoration = t1.inputDecoration,
        t2 = t1.padding;
      if (t2 == null)
        t2 = C.EdgeInsets_0_0_0_0;
      t3 = t1.borderRadius;
      if (t3 == null)
        t3 = 0;
      t3 = A.BorderRadius$all(new A.Radius(t3, t3));
      t4 = _this._tag_editor$_isFocused ? 1 : 0.5;
      if (_this._tag_editor$_isFocused) {
        t5 = t1.focusedBorderColor;
        if (t5 == null)
          t5 = C.Color_0;
      } else {
        t5 = t1.enableBorderColor;
        if (t5 == null)
          t5 = C.Color_0;
      }
      t4 = A.Border_Border$all(t5, t4);
      t5 = t1.backgroundColor;
      if (t5 == null)
        t5 = C.Color_0;
      t6 = t1.length;
      t7 = t1.minTextFieldWidth;
      t1 = t1.tagSpacing;
      t8 = type$.Widget;
      _list = J.JSArray_JSArray$allocateGrowable(t6, t8);
      for (t9 = type$.ValueKey_Object, index = 0; index < t6; ++index) {
        t10 = "tag_" + index;
        t11 = _this._widget.tagBuilder$2(context, index);
        _list[index] = new A.LayoutId(t10, t11, new A.ValueKey(t10, t9));
      }
      t8 = A.List_List$of(_list, true, t8);
      t9 = _this.__TagsEditorState__focusNodeKeyboard_A;
      t9 === $ && A.throwUnnamedLateFieldNI();
      t10 = _this._widget;
      t11 = t10.textStyle;
      t12 = _this.__TagsEditorState__focusNode_A;
      t12 === $ && A.throwUnnamedLateFieldNI();
      t13 = _this.__TagsEditorState__textFieldController_A;
      t13 === $ && A.throwUnnamedLateFieldNI();
      t14 = t10.keyboardType;
      t15 = t10.textInputAction;
      t16 = t10.cursorColor;
      t8.push(A.LayoutId$(A.RawKeyboardListener$(false, A.TextField$(false, C.List_empty0, t10.autofocus, _null, A.text_field_TextField__defaultContextMenuBuilder$closure(), t13, t16, _null, _null, 2, decoration, true, _null, true, true, false, t12, _null, _null, _null, t14, _null, _null, 1, _null, _null, false, "\u2022", _this.get$_onTextFieldChange(), _null, _this.get$_tag_editor$_onSubmitted(), _null, _null, false, _null, _null, C.EdgeInsets_20_20_20_20, _null, _null, _null, _null, _null, _null, t11, C.TextAlign_4, _null, C.TextCapitalization_30, _null, t15, _null), t9, new B.TagsEditorState_build_closure(_this)), "text_field"));
      tagEditorArea = A.Container$(_null, new B.TagLayout(new B.TagEditorLayoutDelegate(t6, t7, t1, C.Size_0_0), t8, _null), C.Clip_0, _null, _null, new A.BoxDecoration(t5, _null, t4, t3, _null, _null, _null, C.BoxShape_0), _null, _null, _null, _null, t2, _null, _null, _null);
      _this._widget.toString;
      return new A.NotificationListener(new B.TagsEditorState_build_closure0(_this), new B.SizeChangedLayoutNotifier(A.Column$(A._setArrayType([tagEditorArea, new A.CompositedTransformTarget(_this._tag_editor$_layerLink, A.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null)], type$.JSArray_Widget), C.CrossAxisAlignment_2, _null, C.MainAxisAlignment_0, C.MainAxisSize_1, C.VerticalDirection_1), _null), _null, type$.NotificationListener_SizeChangedLayoutNotification);
    }
  };
  B.TagEditorLayoutDelegate.prototype = {
    getSize$1(constraints) {
      return new A.Size(constraints.maxWidth, 0);
    },
    performLayout$1(size) {
      var t2, t3, t4, t5, t6, cursor, _i, tagId, child, childSize, t7, t8, textWidth, textFieldSize, _this = this,
        _s10_ = "text_field",
        t1 = type$.JSArray_Size,
        tagSizes = A._setArrayType([], t1);
      for (t2 = A.Iterable_Iterable$generate(_this.length, null, type$.int).toList$0(0), t3 = t2.length, t4 = type$.MultiChildLayoutParentData, t5 = _this.spacing, t6 = size._dx, cursor = C.Offset_0_0, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        tagId = "tag_" + A.S(t2[_i]);
        if (_this._idToChild.$index(0, tagId) != null) {
          child = _this._idToChild.$index(0, tagId);
          child.layout$2$parentUsesSize(new A.BoxConstraints(0, t6, 0, 1 / 0), true);
          childSize = child._box$_size;
          t7 = childSize._dx;
          if (B.TagEditorLayoutDelegate__isOverflow(t7, t6, t5, tagSizes)) {
            cursor = new A.Offset(0, cursor._dy + childSize._dy);
            tagSizes = A._setArrayType([], t1);
          }
          t8 = _this._idToChild.$index(0, tagId).parentData;
          t8.toString;
          t4._as(t8).offset = cursor;
          cursor = new A.Offset(cursor._dx + t7 + t5, cursor._dy);
          tagSizes.push(childSize);
        }
      }
      if (_this._idToChild.$index(0, _s10_) != null) {
        textWidth = Math.max(t6 - C.JSArray_methods.fold$2(tagSizes, 0, new B.TagEditorLayoutDelegate_performLayout_closure()) - t5 * Math.max(tagSizes.length - 1, 0), _this.minTextFieldWidth);
        if (B.TagEditorLayoutDelegate__isOverflow(textWidth, t6, t5, tagSizes)) {
          textFieldSize = _this.layoutChild$2(_s10_, A.BoxConstraints$loose(new A.Size(t6, 1 / 0)));
          cursor = new A.Offset(0, cursor._dy + textFieldSize._dy);
        } else
          textFieldSize = _this.layoutChild$2(_s10_, A.BoxConstraints$loose(new A.Size(textWidth, 1 / 0)));
        _this.positionChild$2(_s10_, cursor);
      } else
        textFieldSize = C.Size_0_0;
      _this.parentSize = new A.Size(t6, cursor._dy + textFieldSize._dy);
    },
    shouldRelayout$1(oldDelegate) {
      return false;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  B.TagLayout.prototype = {
    createRenderObject$1(context) {
      var t1 = new B.TagRenderLayoutBox(type$.TagEditorLayoutDelegate._as(this.delegate), 0, null, null, A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.addAll$1(0, null);
      return t1;
    }
  };
  B.TagRenderLayoutBox.prototype = {
    performLayout$0() {
      this.super$RenderCustomMultiChildLayoutBox$performLayout();
      this._box$_size = type$.TagEditorLayoutDelegate._as(this._custom_layout$_delegate).parentSize;
    }
  };
  B.ValidationSuggestionItem.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["~()", "double(double)", "~(String)", "~(TapDownDetails)", "Widget(_ChildEntry)", "bool(SizeChangedLayoutNotification)", "Widget(Widget,Animation0<double>)", "Widget(Widget?,List<Widget>)"]);
  B._RawChipState__handleTapDown_closure.prototype = {
    call$0() {
      this.$this._isTapping = true;
    },
    $signature: 0
  };
  B._RawChipState__handleTapCancel_closure.prototype = {
    call$0() {
      this.$this._isTapping = false;
    },
    $signature: 0
  };
  B._RawChipState__handleTap_closure.prototype = {
    call$0() {
      this.$this._isTapping = false;
    },
    $signature: 0
  };
  B._RawChipState_didUpdateWidget_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.avatar != null || false;
      t1 = t1.___RawChipState_avatarDrawerController_A;
      if (t2) {
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.forward$0(0);
      } else {
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.reverse$0(0);
      }
    },
    $signature: 0
  };
  B._RawChipState_didUpdateWidget_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.onDeleted;
      t1 = t1.___RawChipState_deleteDrawerController_A;
      if (t2 != null) {
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.forward$0(0);
      } else {
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.reverse$0(0);
      }
    },
    $signature: 0
  };
  B._RawChipState_build_closure.prototype = {
    call$2(context, child) {
      var _this = this, _null = null;
      return A.Container$(_null, child, C.Clip_0, _null, _null, new A.ShapeDecoration(_this.$this._chip$_getBackgroundColor$3(_this.theme, _this.chipTheme, _this.chipDefaults), _null, _null, _null, _this.resolvedShape), _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 1455
  };
  B._RenderChipRedirectingHitDetection_hitTest_closure.prototype = {
    call$2(result, position) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, this.offset);
    },
    $signature: 21
  };
  B._RenderChip_hitTest_closure.prototype = {
    call$2(result, position) {
      return this.hitTestChild.hitTest$2$position(result, this.center);
    },
    $signature: 21
  };
  B._RenderChip_performLayout_centerLayout.prototype = {
    call$2(boxSize, x) {
      var t1;
      switch (this.$this._chip$_textDirection.index) {
        case 0:
          t1 = this.sizes;
          return new A.Offset(x - boxSize._dx, (t1.content - boxSize._dy + t1.densityAdjustment._dy) / 2);
        case 1:
          t1 = this.sizes;
          return new A.Offset(x, (t1.content - boxSize._dy + t1.densityAdjustment._dy) / 2);
      }
    },
    $signature: 1456
  };
  B._RenderChip__paintAvatar_paintWithOverlay.prototype = {
    call$2(context, offset) {
      var t4, t5, avatarRect, darkenPaint, path, checkOffset,
        t1 = this.$this,
        t2 = t1.SlottedContainerRenderObjectMixin__slotToChild,
        t3 = t2.$index(0, D._ChipSlot_1);
      t3.toString;
      t4 = t2.$index(0, D._ChipSlot_1).parentData;
      t4.toString;
      t5 = type$.BoxParentData;
      context.paintChild$2(t3, t5._as(t4).offset.$add(0, offset));
      t3 = t1.checkmarkAnimation;
      t3 = t3.get$status(t3);
      if (t3 !== C.AnimationStatus_0) {
        if (t1._chip$_theme.showAvatar) {
          avatarRect = B._RenderChip__boxRect(t2.$index(0, D._ChipSlot_1)).shift$1(offset);
          darkenPaint = $.$get$_renderer().createPaint$0();
          t3 = $.$get$_RenderChip_selectionScrimTween();
          t4 = t1.checkmarkAnimation;
          t4 = t3.transform$1(0, t4.get$value(t4));
          t4.toString;
          darkenPaint.set$color(0, t4);
          darkenPaint.set$blendMode(C.BlendMode_9);
          path = t1.avatarBorder.getOuterPath$1(avatarRect);
          context.get$canvas(context).drawPath$2(path, darkenPaint);
        }
        t3 = t2.$index(0, D._ChipSlot_1)._box$_size._dy;
        t4 = t2.$index(0, D._ChipSlot_1).parentData;
        t4.toString;
        checkOffset = t5._as(t4).offset.$add(0, new A.Offset(t2.$index(0, D._ChipSlot_1)._box$_size._dy * 0.125, t2.$index(0, D._ChipSlot_1)._box$_size._dy * 0.125));
        t1._paintCheck$3(context.get$canvas(context), offset.$add(0, checkOffset), t3 * 0.75);
      }
    },
    $signature: 27
  };
  B._RenderChip__paintChild_closure.prototype = {
    call$2(context, offset) {
      var t1 = this.child,
        t2 = t1.parentData;
      t2.toString;
      context.paintChild$2(t1, type$.BoxParentData._as(t2).offset.$add(0, offset));
    },
    $signature: 27
  };
  B._AnimatedSwitcherState__newEntry_closure.prototype = {
    call$1($status) {
      var t1;
      if ($status === C.AnimationStatus_0) {
        t1 = this.$this;
        t1.setState$1(new B._AnimatedSwitcherState__newEntry__closure(t1, this.entry));
        this.controller.dispose$0();
      }
    },
    $signature: 22
  };
  B._AnimatedSwitcherState__newEntry__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._outgoingEntries.remove$1(0, this.entry);
      t1._outgoingWidgets = null;
    },
    $signature: 0
  };
  B._AnimatedSwitcherState__rebuildOutgoingWidgetsIfNeeded_closure.prototype = {
    call$1(entry) {
      return entry.transition;
    },
    $signature: typesOffset + 4
  };
  B._AnimatedSwitcherState_build_closure.prototype = {
    call$1(outgoing) {
      var t1 = outgoing.key,
        t2 = this.$this._currentEntry;
      return !J.$eq$(t1, t2 == null ? null : t2.transition.key);
    },
    $signature: 1457
  };
  B.SizeChangedLayoutNotifier_createRenderObject_closure.prototype = {
    call$0() {
      this.context.dispatchNotification$1(D.C_SizeChangedLayoutNotification);
    },
    $signature: 0
  };
  B.TagsEditorState__initializeSuggestionBox_closure.prototype = {
    call$1(_) {
      return this.$call$body$TagsEditorState__initializeSuggestionBox_closure(_);
    },
    $call$body$TagsEditorState__initializeSuggestionBox_closure(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$this._createOverlayEntry$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 250
  };
  B.TagsEditorState__onFocusChanged_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.__TagsEditorState__focusNode_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1._tag_editor$_isFocused = t2.get$hasFocus();
    },
    $signature: 0
  };
  B.TagsEditorState__createOverlayEntry_closure.prototype = {
    call$1(context) {
      var t4, topAvailableSpace, mq, bottomAvailableSpace, suggestionBoxHeight, showTop, compositedTransformFollowerOffset, _null = null, t1 = {},
        t2 = this.$this,
        t3 = type$.nullable_RenderBox;
      if (t3._as(t2._framework$_element.get$renderObject()) != null) {
        t4 = t3._as(t2._framework$_element.get$renderObject())._box$_size;
        t4.toString;
        topAvailableSpace = A.MatrixUtils_transformPoint(t3._as(t2._framework$_element.get$renderObject()).getTransformTo$1(0, _null), C.Offset_0_0)._dy;
        mq = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data;
        t3 = t4._dy;
        bottomAvailableSpace = mq.size._dy - mq.viewInsets.bottom - topAvailableSpace - t3;
        suggestionBoxHeight = Math.max(topAvailableSpace, bottomAvailableSpace);
        t1.suggestionBoxHeight = suggestionBoxHeight;
        t1.suggestionBoxHeight = Math.min(suggestionBoxHeight, t2._widget.suggestionsBoxMaxHeight);
        showTop = topAvailableSpace > bottomAvailableSpace;
        compositedTransformFollowerOffset = showTop ? new A.Offset(0, -t3) : C.Offset_0_0;
        t3 = t2._suggestionsStreamController;
        t3 = t3 == null ? _null : new A._BroadcastStream(t3, A._instanceType(t3)._eval$1("_BroadcastStream<1>"));
        return A.StreamBuilder$(new B.TagsEditorState__createOverlayEntry__closure(t1, t2, t4, compositedTransformFollowerOffset, showTop), t2._suggestions, t3, t2.$ti._eval$1("List<1>?"));
      }
      return A.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 23
  };
  B.TagsEditorState__createOverlayEntry__closure.prototype = {
    call$2(context, snapshot) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, suggestionsListView, _this = this, _null = null,
        t1 = snapshot.data;
      if (t1 != null && J.get$isNotEmpty$asx(t1)) {
        t2 = _this.$this;
        t3 = t2._widget;
        t4 = t3.suggestionMargin;
        if (t4 == null)
          t4 = C.EdgeInsets_0_0_0_0;
        t5 = t3.suggestionsBoxElevation;
        if (t5 == null)
          t5 = 20;
        t6 = t3.suggestionsBoxRadius;
        t7 = A.BorderRadius$circular(t6);
        t8 = t3.suggestionsBoxBackgroundColor;
        t9 = A.BorderRadius$circular(t6);
        t6 = A.BorderRadius$all(new A.Radius(t6, t6));
        t10 = _this._box_0.suggestionBoxHeight;
        t3 = t3.suggestionPadding;
        if (t3 == null)
          t3 = C.EdgeInsets_0_0_0_0;
        t1.toString;
        suggestionsListView = A.PointerInterceptor$(A.AutocompleteHighlightedOption$(new B.ValidationSuggestionItem(t2._validationSuggestionItemNotifier, new A.Padding(t4, A.Material$(C.Duration_200000, true, t7, A.ClipRRect$(t9, A.Container$(_null, A.ListView$builder(_null, new B.TagsEditorState__createOverlayEntry___closure(t2, snapshot), J.get$length$asx(t1), _null, _null, t3, _null, _null, C.Axis_1, true), C.Clip_0, _null, new A.BoxConstraints(0, 1 / 0, 0, t10), new A.BoxDecoration(t8, _null, _null, t6, _null, _null, _null, C.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null), C.Clip_2), C.Clip_0, t8, t5, _null, _null, _null, _null, _null, C.MaterialType_0), _null), _null), t2._highlightedOptionIndex));
        return A.Positioned$(_null, A.CompositedTransformFollower$(A.TextFieldTapRegion$(!_this.showTop ? suggestionsListView : A.FractionalTranslation$(suggestionsListView, true, C.Offset_0_m1), _null, _null), t2._tag_editor$_layerLink, _this.compositedTransformFollowerOffset, false, C.Alignment_m1_m1), _null, _null, _null, _null, _null, _this.size._dx);
      }
      return A.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature() {
      return this.$this.$ti._eval$1("Widget(BuildContext,AsyncSnapshot<List<1>?>)");
    }
  };
  B.TagsEditorState__createOverlayEntry___closure.prototype = {
    call$2(context, index) {
      var item, highlight, t3, t4, t5, _null = null,
        t1 = this.$this,
        t2 = t1._suggestions;
      if (t2 != null)
        t2 = J.get$isNotEmpty$asx(t2) === true;
      else
        t2 = false;
      if (t2) {
        t2 = t1._suggestions;
        t2.toString;
        item = J.$index$asx(t2, index);
        highlight = A.AutocompleteHighlightedOption_of(context) === index;
        t2 = context.dependOnInheritedWidgetOfExactType$1$0(type$.ValidationSuggestionItem);
        if (t2 == null)
          t2 = _null;
        else
          t2 = t2.notifier._change_notifier$_value;
        t3 = t1._widget;
        if (!t3.useDefaultHighlight) {
          t4 = this.snapshot.data;
          t4.toString;
          t4 = J.get$length$asx(t4);
          return t3.suggestionBuilder.call$7(context, t1, item, index, t4, highlight, t2);
        } else {
          if (highlight)
            t3 = A.Theme_of(context).focusColor;
          else
            t3 = _null;
          t4 = t1._widget;
          t4.toString;
          t5 = this.snapshot.data;
          t5.toString;
          return A.Container$(_null, t4.suggestionBuilder.call$7(context, t1, item, index, J.get$length$asx(t5), highlight, t2), C.Clip_0, t3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
        }
      } else
        return A.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 110
  };
  B.TagsEditorState__onSearchChanged_closure.prototype = {
    call$0() {
      return this.$this._suggestions = this.results;
    },
    $signature: 0
  };
  B.TagsEditorState__scrollToVisible_closure.prototype = {
    call$0() {
      $.WidgetsBinding__instance.SchedulerBinding__postFrameCallbacks.push(new B.TagsEditorState__scrollToVisible__closure(this.$this));
    },
    $signature: 6
  };
  B.TagsEditorState__scrollToVisible__closure.prototype = {
    call$1(_) {
      return this.$call$body$TagsEditorState__scrollToVisible__closure(_);
    },
    $call$body$TagsEditorState__scrollToVisible__closure(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, renderBox;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              renderBox = type$.RenderBox._as(t1._framework$_element.get$renderObject());
              t1 = t1._framework$_element;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Scrollable_maybeOf(t1)._scrollable$_position.ensureVisible$1(renderBox), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 250
  };
  B.TagsEditorState_build_closure.prototype = {
    call$1($event) {
      var t1 = $event instanceof A.RawKeyDownEvent;
      if (t1 && $event.data.get$logicalKey().$eq(0, C.LogicalKeyboardKey_4294967304))
        this.$this._onKeyboardBackspaceListener$0();
      else if (t1 && $event.data.get$logicalKey().$eq(0, C.LogicalKeyboardKey_4294968065)) {
        t1 = this.$this;
        t1._updateHighlight$1(t1._highlightedOptionIndex._change_notifier$_value + 1);
      } else if (t1 && $event.data.get$logicalKey().$eq(0, C.LogicalKeyboardKey_4294968068)) {
        t1 = this.$this;
        t1._updateHighlight$1(t1._highlightedOptionIndex._change_notifier$_value - 1);
      }
    },
    $signature: 94
  };
  B.TagsEditorState_build_closure0.prototype = {
    call$1(val) {
      $.WidgetsBinding__instance.SchedulerBinding__postFrameCallbacks.push(new B.TagsEditorState_build__closure(this.$this));
      return true;
    },
    $signature: typesOffset + 5
  };
  B.TagsEditorState_build__closure.prototype = {
    call$1(_) {
      return this.$call$body$TagsEditorState_build__closure(_);
    },
    $call$body$TagsEditorState_build__closure(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this._suggestionsBoxController;
              if (t1 != null) {
                t1 = t1.overlayEntry;
                if (t1 != null)
                  t1.markNeedsBuild$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 250
  };
  B.TagEditorLayoutDelegate__isOverflow_closure.prototype = {
    call$2(result, tag) {
      return result + tag._dx;
    },
    $signature: 547
  };
  B.TagEditorLayoutDelegate_performLayout_closure.prototype = {
    call$2(result, tag) {
      return result + tag._dx;
    },
    $signature: 547
  };
  (function aliases() {
    var _ = B.__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin.prototype;
    _.super$__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = B.__AnimatedSwitcherState_State_TickerProviderStateMixin.prototype;
    _.super$__AnimatedSwitcherState_State_TickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u,
      _static_2 = hunkHelpers._static_2;
    var _;
    _instance_1_u(_ = B._RawChipState.prototype, "get$_chip$_handleTapDown", "_chip$_handleTapDown$1", 3);
    _instance_0_u(_, "get$_chip$_handleTapCancel", "_chip$_handleTapCancel$0", 0);
    _instance_0_u(_, "get$_chip$_handleTap", "_chip$_handleTap$0", 0);
    _instance_1_u(_ = B._RenderChip.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 1);
    _static_2(B, "animated_switcher_AnimatedSwitcher_defaultTransitionBuilder$closure", "AnimatedSwitcher_defaultTransitionBuilder", 6);
    _static_2(B, "animated_switcher_AnimatedSwitcher_defaultLayoutBuilder$closure", "AnimatedSwitcher_defaultLayoutBuilder", 7);
    _instance_0_u(_ = B.TagsEditorState.prototype, "get$_onFocusChanged", "_onFocusChanged$0", 0);
    _instance_0_u(_, "get$_onFocusKeyboardChanged", "_onFocusKeyboardChanged$0", 0);
    _instance_1_u(_, "get$_onTextFieldChange", "_onTextFieldChange$1", 2);
    _instance_1_u(_, "get$_onSearchChanged", "_onSearchChanged$1", 2);
    _instance_1_u(_, "get$_tag_editor$_onSubmitted", "_tag_editor$_onSubmitted$1", 2);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(B.Chip, A.StatelessWidget);
    _inheritMany(A.StatefulWidget, [B.RawChip, B.AnimatedSwitcher, B.TagEditor]);
    _inheritMany(A.State0, [B.__RawChipState_State_MaterialStateMixin, B.__AnimatedSwitcherState_State_TickerProviderStateMixin, B.TagsEditorState]);
    _inherit(B.__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin, B.__RawChipState_State_MaterialStateMixin);
    _inherit(B._RawChipState, B.__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin);
    _inheritMany(A.Closure0Args, [B._RawChipState__handleTapDown_closure, B._RawChipState__handleTapCancel_closure, B._RawChipState__handleTap_closure, B._RawChipState_didUpdateWidget_closure, B._RawChipState_didUpdateWidget_closure0, B._AnimatedSwitcherState__newEntry__closure, B.SizeChangedLayoutNotifier_createRenderObject_closure, B.TagsEditorState__onFocusChanged_closure, B.TagsEditorState__onSearchChanged_closure, B.TagsEditorState__scrollToVisible_closure]);
    _inheritMany(A.Closure2Args, [B._RawChipState_build_closure, B._RenderChipRedirectingHitDetection_hitTest_closure, B._RenderChip_hitTest_closure, B._RenderChip_performLayout_centerLayout, B._RenderChip__paintAvatar_paintWithOverlay, B._RenderChip__paintChild_closure, B.TagsEditorState__createOverlayEntry__closure, B.TagsEditorState__createOverlayEntry___closure, B.TagEditorLayoutDelegate__isOverflow_closure, B.TagEditorLayoutDelegate_performLayout_closure]);
    _inheritMany(A.SingleChildRenderObjectWidget, [B._ChipRedirectingHitDetectionWidget, B.SizeChangedLayoutNotifier]);
    _inherit(B._RenderChipRedirectingHitDetection, A.RenderConstrainedBox);
    _inherit(B.__ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.RenderObjectWidget);
    _inherit(B._ChipRenderWidget, B.__ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin);
    _inherit(B._ChipSlot, A._Enum);
    _inheritMany(A.Object, [B._ChipRenderTheme, B._ChipSizes, B._ChildEntry, B.SuggestionsBoxController]);
    _inherit(B.__RenderChip_RenderBox_SlottedContainerRenderObjectMixin, A.RenderBox);
    _inherit(B._RenderChip, B.__RenderChip_RenderBox_SlottedContainerRenderObjectMixin);
    _inherit(B._UnconstrainedInkSplashFactory, A.InteractiveInkFeatureFactory);
    _inherit(B._AnimatedSwitcherState, B.__AnimatedSwitcherState_State_TickerProviderStateMixin);
    _inheritMany(A.Closure, [B._AnimatedSwitcherState__newEntry_closure, B._AnimatedSwitcherState__rebuildOutgoingWidgetsIfNeeded_closure, B._AnimatedSwitcherState_build_closure, B.TagsEditorState__initializeSuggestionBox_closure, B.TagsEditorState__createOverlayEntry_closure, B.TagsEditorState__scrollToVisible__closure, B.TagsEditorState_build_closure, B.TagsEditorState_build_closure0, B.TagsEditorState_build__closure]);
    _inherit(B.SizeChangedLayoutNotification, A.LayoutChangedNotification);
    _inherit(B._RenderSizeChangedWithCallback, A.RenderProxyBox);
    _inherit(B.TagEditorLayoutDelegate, A.MultiChildLayoutDelegate);
    _inherit(B.TagLayout, A.CustomMultiChildLayout);
    _inherit(B.TagRenderLayoutBox, A.RenderCustomMultiChildLayoutBox);
    _inherit(B.ValidationSuggestionItem, A.InheritedNotifier);
    _mixinHard(B.__ChipRenderWidget_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.SlottedMultiChildRenderObjectWidgetMixin);
    _mixin(B.__RawChipState_State_MaterialStateMixin, A.MaterialStateMixin);
    _mixinHard(B.__RawChipState_State_MaterialStateMixin_TickerProviderStateMixin, A.TickerProviderStateMixin);
    _mixinHard(B.__RenderChip_RenderBox_SlottedContainerRenderObjectMixin, A.SlottedContainerRenderObjectMixin);
    _mixinHard(B.__AnimatedSwitcherState_State_TickerProviderStateMixin, A.TickerProviderStateMixin);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"Chip":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"RawChip":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ChipSlot":{"Enum":[]},"_RawChipState":{"State0":["RawChip"]},"_ChipRedirectingHitDetectionWidget":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderChipRedirectingHitDetection":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_ChipRenderWidget":{"SlottedMultiChildRenderObjectWidgetMixin":["_ChipSlot"],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[],"SlottedMultiChildRenderObjectWidgetMixin.S":"_ChipSlot"},"_RenderChip":{"SlottedContainerRenderObjectMixin":["_ChipSlot"],"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"SlottedContainerRenderObjectMixin.S":"_ChipSlot"},"AnimatedSwitcher":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AnimatedSwitcherState":{"State0":["AnimatedSwitcher"]},"SizeChangedLayoutNotification":{"LayoutChangedNotification":[]},"SizeChangedLayoutNotifier":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderSizeChangedWithCallback":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"TagEditor":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TagsEditorState":{"State0":["TagEditor<1>"]},"TagLayout":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"TagRenderLayoutBox":{"RenderBoxContainerDefaultsMixin":["RenderBox","MultiChildLayoutParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","MultiChildLayoutParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"MultiChildLayoutParentData","RenderBoxContainerDefaultsMixin.1":"MultiChildLayoutParentData","RenderBoxContainerDefaultsMixin.0":"RenderBox","ContainerRenderObjectMixin.0":"RenderBox"},"ValidationSuggestionItem":{"InheritedNotifier":["ValueNotifier<String?>"],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[],"InheritedNotifier.T":"ValueNotifier<String?>"},"ChipTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      BoxConstraints: findType("BoxConstraints"),
      BoxParentData: findType("BoxParentData"),
      ChipTheme: findType("ChipTheme"),
      ContainerLayer: findType("ContainerLayer0"),
      Directionality: findType("Directionality"),
      JSArray_Listenable: findType("JSArray<Listenable>"),
      JSArray_RenderBox: findType("JSArray<RenderBox>"),
      JSArray_Size: findType("JSArray<Size>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      MaterialLocalizations: findType("MaterialLocalizations"),
      MaterialState: findType("MaterialState"),
      MediaQuery: findType("MediaQuery"),
      MultiChildLayoutParentData: findType("MultiChildLayoutParentData"),
      NotificationListener_SizeChangedLayoutNotification: findType("NotificationListener<SizeChangedLayoutNotification>"),
      Null: findType("Null"),
      OverlayState: findType("OverlayState"),
      RenderBox: findType("RenderBox"),
      String: findType("String"),
      TagEditorLayoutDelegate: findType("TagEditorLayoutDelegate"),
      ValidationSuggestionItem: findType("ValidationSuggestionItem"),
      ValueKey_Key: findType("ValueKey<Key>"),
      ValueKey_Object: findType("ValueKey<Object>"),
      ValueKey_int: findType("ValueKey<int>"),
      ValueKey_nullable_Key: findType("ValueKey<Key?>"),
      Widget: findType("Widget"),
      _ChildEntry: findType("_ChildEntry"),
      _ChipSlot: findType("_ChipSlot"),
      dynamic: findType("@"),
      int: findType("int"),
      nullable_BorderSide: findType("BorderSide?"),
      nullable_Color: findType("Color?"),
      nullable_OutlinedBorder: findType("OutlinedBorder?"),
      nullable_RenderBox: findType("RenderBox?"),
      nullable_String: findType("String?"),
      void: findType("~")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    D.C_SizeChangedLayoutNotification = new B.SizeChangedLayoutNotification();
    D.Color_1612257561 = new A.Color(1612257561);
    D.Color_4292865791 = new A.Color(4292865791);
    D.Color_4294914887 = new A.Color(4294914887);
    D.Duration_195000 = new A.Duration(195000);
    D.EdgeInsets_10_10_10_10 = new A.EdgeInsets(10, 10, 10, 10);
    D.IconData_57657_false = new A.IconData(57657, false);
    D.Icon_25o = new A.Icon(D.IconData_57657_false, 18, null, null);
    D._ChipSlot_0 = new B._ChipSlot(0, "label");
    D._ChipSlot_1 = new B._ChipSlot(1, "avatar");
    D._ChipSlot_2 = new B._ChipSlot(2, "deleteIcon");
    D.List_LlV = A._setArrayType(makeConstList([D._ChipSlot_0, D._ChipSlot_1, D._ChipSlot_2]), A.findType("JSArray<_ChipSlot>"));
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "_RenderChip_selectionScrimTween", "$get$_RenderChip_selectionScrimTween", () => A.ColorTween$(C.Color_0, D.Color_1612257561));
  })();
};

$__dart_deferred_initializers__["umwezcLVjEdBgZNOh8n5+UV8NlM="] = $__dart_deferred_initializers__.current
